

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Aug 03 00:04:34 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1,inline
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    40  0000                     
    41                           ; Version 2.05
    42                           ; Generated 20/12/2018 GMT
    43                           ; 
    44                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC18F45K20 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     _TRISCbits	set	3988
    76  0000                     _LATD	set	3980
    77  0000                     _PORTD	set	3971
    78  0000                     _TRISD	set	3989
    79  0000                     _LATCbits	set	3979
    80  0000                     _ADCON0	set	4034
    81  0000                     _INTCONbits	set	4082
    82  0000                     _PIE1bits	set	3997
    83  0000                     _ADCON1	set	4033
    84  0000                     _ADCON2bits	set	4032
    85  0000                     _ANSELbits	set	3966
    86  0000                     _TRISAbits	set	3986
    87  0000                     _OSCCON	set	4051
    88  0000                     _ADCON0bits	set	4034
    89  0000                     _ADRESL	set	4035
    90  0000                     _ADRESH	set	4036
    91  0000                     _PIR1bits	set	3998
    92                           
    93                           	psect	smallconst
    94  000600                     __psmallconst:
    95                           	opt callstack 0
    96  000600  00                 	db	0
    97  000601                     STR_1:
    98  000601  41                 	db	65	;'A'
    99  000602  44                 	db	68	;'D'
   100  000603  43                 	db	67	;'C'
   101  000604  20                 	db	32
   102  000605  56                 	db	86	;'V'
   103  000606  41                 	db	65	;'A'
   104  000607  4C                 	db	76	;'L'
   105  000608  3A                 	db	58	;':'
   106  000609  20                 	db	32
   107  00060A  25                 	db	37
   108  00060B  30                 	db	48	;'0'
   109  00060C  34                 	db	52	;'4'
   110  00060D  75                 	db	117	;'u'
   111  00060E  00                 	db	0
   112                           
   113                           ; #config settings
   114  00060F  00                 	db	0	; dummy byte at the end
   115  0000                     
   116                           	psect	cinit
   117  0011C0                     __pcinit:
   118                           	opt callstack 0
   119  0011C0                     start_initialization:
   120                           	opt callstack 0
   121  0011C0                     __initialization:
   122                           	opt callstack 0
   123                           
   124                           ; Clear objects allocated to BANK0 (56 bytes)
   125  0011C0  EE00  F060         	lfsr	0,__pbssBANK0
   126  0011C4  0E38               	movlw	56
   127  0011C6                     clear_0:
   128  0011C6  6AEE               	clrf	postinc0,c
   129  0011C8  06E8               	decf	wreg,f,c
   130  0011CA  E1FD               	bnz	clear_0
   131                           
   132                           ; Clear objects allocated to COMRAM (2 bytes)
   133  0011CC  6A5D               	clrf	(__pbssCOMRAM+1)& (0+255),c
   134  0011CE  6A5C               	clrf	__pbssCOMRAM& (0+255),c
   135  0011D0                     end_of_initialization:
   136                           	opt callstack 0
   137  0011D0                     __end_of__initialization:
   138                           	opt callstack 0
   139  0011D0  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   140  0011D2  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   141  0011D4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   142  0011D6  6EF8               	movwf	tblptru,c
   143  0011D8  0100               	movlb	0
   144  0011DA  EF7C  F007         	goto	_main	;jump to C main() function
   145                           
   146                           	psect	bssCOMRAM
   147  00005C                     __pbssCOMRAM:
   148                           	opt callstack 0
   149  00005C                     _flags:
   150                           	opt callstack 0
   151  00005C                     	ds	2
   152                           
   153                           	psect	bssBANK0
   154  000060                     __pbssBANK0:
   155                           	opt callstack 0
   156  000060                     _nout:
   157                           	opt callstack 0
   158  000060                     	ds	2
   159  000062                     _width:
   160                           	opt callstack 0
   161  000062                     	ds	2
   162  000064                     _prec:
   163                           	opt callstack 0
   164  000064                     	ds	2
   165  000066                     _adcVal:
   166                           	opt callstack 0
   167  000066                     	ds	2
   168  000068                     _dbuf:
   169                           	opt callstack 0
   170  000068                     	ds	32
   171  000088                     _msgBuffer:
   172                           	opt callstack 0
   173  000088                     	ds	16
   174                           
   175                           	psect	cstackBANK0
   176  000098                     __pcstackBANK0:
   177                           	opt callstack 0
   178  000098                     ?_sprintf:
   179                           	opt callstack 0
   180  000098                     sprintf@s:
   181                           	opt callstack 0
   182                           
   183                           ; 2 bytes @ 0x0
   184  000098                     	ds	2
   185  00009A                     sprintf@fmt:
   186                           	opt callstack 0
   187                           
   188                           ; 2 bytes @ 0x2
   189  00009A                     	ds	6
   190  0000A0                     sprintf@ap:
   191                           	opt callstack 0
   192                           
   193                           ; 2 bytes @ 0x8
   194  0000A0                     	ds	2
   195  0000A2                     sprintf@f:
   196                           	opt callstack 0
   197                           
   198                           ; 6 bytes @ 0xA
   199  0000A2                     	ds	6
   200                           
   201                           	psect	cstackCOMRAM
   202  000001                     __pcstackCOMRAM:
   203                           	opt callstack 0
   204  000001                     ??_CLCD_SendCmd:
   205  000001                     ??_CLCD_SendData:
   206  000001                     ?_strlen:
   207                           	opt callstack 0
   208  000001                     ?_isdigit:
   209                           	opt callstack 0
   210  000001                     ?_isspace:
   211                           	opt callstack 0
   212  000001                     ?___wmul:
   213                           	opt callstack 0
   214  000001                     ?___lodiv:
   215                           	opt callstack 0
   216  000001                     ?___lomod:
   217                           	opt callstack 0
   218  000001                     ___wmul@multiplier:
   219                           	opt callstack 0
   220  000001                     isdigit@c:
   221                           	opt callstack 0
   222  000001                     isspace@c:
   223                           	opt callstack 0
   224  000001                     fputc@c:
   225                           	opt callstack 0
   226  000001                     strlen@s:
   227                           	opt callstack 0
   228  000001                     ___lodiv@dividend:
   229                           	opt callstack 0
   230  000001                     ___lomod@dividend:
   231                           	opt callstack 0
   232                           
   233                           ; 8 bytes @ 0x0
   234  000001                     	ds	1
   235  000002                     CLCD_SendCmd@cmd:
   236                           	opt callstack 0
   237  000002                     CLCD_SendData@data:
   238                           	opt callstack 0
   239                           
   240                           ; 1 bytes @ 0x1
   241  000002                     	ds	1
   242  000003                     ??_isdigit:
   243  000003                     ??_isspace:
   244  000003                     CLCD_SendCmd@port:
   245                           	opt callstack 0
   246  000003                     CLCD_SendData@port:
   247                           	opt callstack 0
   248  000003                     ___wmul@multiplicand:
   249                           	opt callstack 0
   250  000003                     fputc@fp:
   251                           	opt callstack 0
   252  000003                     strlen@a:
   253                           	opt callstack 0
   254                           
   255                           ; 2 bytes @ 0x2
   256  000003                     	ds	1
   257  000004                     ??_CLCD_Initialize:
   258  000004                     CLCD_PutC@ch:
   259                           	opt callstack 0
   260  000004                     CLCD_SetPos@col:
   261                           	opt callstack 0
   262                           
   263                           ; 1 bytes @ 0x3
   264  000004                     	ds	1
   265  000005                     ??_fputc:
   266  000005                     CLCD_SetPos@row:
   267                           	opt callstack 0
   268  000005                     CLCD_PutS@str:
   269                           	opt callstack 0
   270  000005                     ___wmul@product:
   271                           	opt callstack 0
   272                           
   273                           ; 2 bytes @ 0x4
   274  000005                     	ds	2
   275  000007                     _isspace$1056:
   276                           	opt callstack 0
   277                           
   278                           ; 1 bytes @ 0x6
   279  000007                     	ds	1
   280  000008                     ?_atoi:
   281                           	opt callstack 0
   282  000008                     atoi@s:
   283                           	opt callstack 0
   284                           
   285                           ; 2 bytes @ 0x7
   286  000008                     	ds	1
   287  000009                     ___lodiv@divisor:
   288                           	opt callstack 0
   289  000009                     ___lomod@divisor:
   290                           	opt callstack 0
   291                           
   292                           ; 8 bytes @ 0x8
   293  000009                     	ds	1
   294  00000A                     ??_atoi:
   295  00000A                     fputs@s:
   296                           	opt callstack 0
   297                           
   298                           ; 2 bytes @ 0x9
   299  00000A                     	ds	2
   300  00000C                     fputs@fp:
   301                           	opt callstack 0
   302                           
   303                           ; 2 bytes @ 0xB
   304  00000C                     	ds	2
   305  00000E                     fputs@c:
   306                           	opt callstack 0
   307  00000E                     atoi@neg:
   308                           	opt callstack 0
   309                           
   310                           ; 2 bytes @ 0xD
   311  00000E                     	ds	1
   312  00000F                     fputs@i:
   313                           	opt callstack 0
   314                           
   315                           ; 2 bytes @ 0xE
   316  00000F                     	ds	1
   317  000010                     _atoi$1038:
   318                           	opt callstack 0
   319                           
   320                           ; 2 bytes @ 0xF
   321  000010                     	ds	1
   322  000011                     ?_pad:
   323                           	opt callstack 0
   324  000011                     ___lomod@counter:
   325                           	opt callstack 0
   326  000011                     pad@fp:
   327                           	opt callstack 0
   328  000011                     ___lodiv@quotient:
   329                           	opt callstack 0
   330                           
   331                           ; 8 bytes @ 0x10
   332  000011                     	ds	1
   333  000012                     _atoi$1040:
   334                           	opt callstack 0
   335                           
   336                           ; 2 bytes @ 0x11
   337  000012                     	ds	1
   338  000013                     pad@buf:
   339                           	opt callstack 0
   340                           
   341                           ; 2 bytes @ 0x12
   342  000013                     	ds	1
   343  000014                     _atoi$1039:
   344                           	opt callstack 0
   345                           
   346                           ; 1 bytes @ 0x13
   347  000014                     	ds	1
   348  000015                     pad@p:
   349                           	opt callstack 0
   350  000015                     atoi@n:
   351                           	opt callstack 0
   352                           
   353                           ; 2 bytes @ 0x14
   354  000015                     	ds	2
   355  000017                     ??_pad:
   356                           
   357                           ; 1 bytes @ 0x16
   358  000017                     	ds	1
   359  000018                     pad@i:
   360                           	opt callstack 0
   361                           
   362                           ; 2 bytes @ 0x17
   363  000018                     	ds	1
   364  000019                     ___lodiv@counter:
   365                           	opt callstack 0
   366                           
   367                           ; 1 bytes @ 0x18
   368  000019                     	ds	1
   369  00001A                     pad@w:
   370                           	opt callstack 0
   371                           
   372                           ; 2 bytes @ 0x19
   373  00001A                     	ds	2
   374  00001C                     ?_utoa:
   375                           	opt callstack 0
   376  00001C                     utoa@fp:
   377                           	opt callstack 0
   378                           
   379                           ; 2 bytes @ 0x1B
   380  00001C                     	ds	2
   381  00001E                     utoa@d:
   382                           	opt callstack 0
   383                           
   384                           ; 8 bytes @ 0x1D
   385  00001E                     	ds	8
   386  000026                     ??_utoa:
   387                           
   388                           ; 1 bytes @ 0x25
   389  000026                     	ds	8
   390  00002E                     utoa@p:
   391                           	opt callstack 0
   392                           
   393                           ; 2 bytes @ 0x2D
   394  00002E                     	ds	2
   395  000030                     utoa@w:
   396                           	opt callstack 0
   397                           
   398                           ; 2 bytes @ 0x2F
   399  000030                     	ds	2
   400  000032                     utoa@n:
   401                           	opt callstack 0
   402                           
   403                           ; 8 bytes @ 0x31
   404  000032                     	ds	8
   405  00003A                     utoa@i:
   406                           	opt callstack 0
   407                           
   408                           ; 2 bytes @ 0x39
   409  00003A                     	ds	2
   410  00003C                     ?_vfpfcnvrt:
   411                           	opt callstack 0
   412  00003C                     vfpfcnvrt@fp:
   413                           	opt callstack 0
   414                           
   415                           ; 2 bytes @ 0x3B
   416  00003C                     	ds	2
   417  00003E                     vfpfcnvrt@fmt:
   418                           	opt callstack 0
   419                           
   420                           ; 2 bytes @ 0x3D
   421  00003E                     	ds	2
   422  000040                     vfpfcnvrt@ap:
   423                           	opt callstack 0
   424                           
   425                           ; 2 bytes @ 0x3F
   426  000040                     	ds	2
   427  000042                     ??_vfpfcnvrt:
   428                           
   429                           ; 1 bytes @ 0x41
   430  000042                     	ds	4
   431  000046                     vfpfcnvrt@llu:
   432                           	opt callstack 0
   433                           
   434                           ; 8 bytes @ 0x45
   435  000046                     	ds	8
   436  00004E                     vfpfcnvrt@done:
   437                           	opt callstack 0
   438                           
   439                           ; 2 bytes @ 0x4D
   440  00004E                     	ds	2
   441  000050                     _vfpfcnvrt$583:
   442                           	opt callstack 0
   443                           
   444                           ; 2 bytes @ 0x4F
   445  000050                     	ds	2
   446  000052                     ?_vfprintf:
   447                           	opt callstack 0
   448  000052                     vfprintf@fp:
   449                           	opt callstack 0
   450                           
   451                           ; 2 bytes @ 0x51
   452  000052                     	ds	2
   453  000054                     vfprintf@fmt:
   454                           	opt callstack 0
   455                           
   456                           ; 2 bytes @ 0x53
   457  000054                     	ds	2
   458  000056                     vfprintf@ap:
   459                           	opt callstack 0
   460                           
   461                           ; 2 bytes @ 0x55
   462  000056                     	ds	2
   463  000058                     vfprintf@cfmt:
   464                           	opt callstack 0
   465                           
   466                           ; 2 bytes @ 0x57
   467  000058                     	ds	2
   468  00005A                     ??_main:
   469                           
   470                           ; 1 bytes @ 0x59
   471  00005A                     	ds	2
   472                           
   473 ;;
   474 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   475 ;;
   476 ;; *************** function _main *****************
   477 ;; Defined at:
   478 ;;		line 30 in file "main.c"
   479 ;; Parameters:    Size  Location     Type
   480 ;;		None
   481 ;; Auto vars:     Size  Location     Type
   482 ;;		None
   483 ;; Return value:  Size  Location     Type
   484 ;;                  1    wreg      void 
   485 ;; Registers used:
   486 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   487 ;; Tracked objects:
   488 ;;		On entry : 0/0
   489 ;;		On exit  : 0/0
   490 ;;		Unchanged: 0/0
   491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   492 ;;      Params:         0       0       0       0       0       0       0
   493 ;;      Locals:         0       0       0       0       0       0       0
   494 ;;      Temps:          2       0       0       0       0       0       0
   495 ;;      Totals:         2       0       0       0       0       0       0
   496 ;;Total ram usage:        2 bytes
   497 ;; Hardware stack levels required when called:    9
   498 ;; This function calls:
   499 ;;		_CLCD_Initialize
   500 ;;		_CLCD_PutS
   501 ;;		_CLCD_SetPos
   502 ;;		_initADC
   503 ;;		_sprintf
   504 ;;		_startADC
   505 ;; This function is called by:
   506 ;;		Startup code after reset
   507 ;; This function uses a non-reentrant model
   508 ;;
   509                           
   510                           	psect	text0
   511  000EF8                     __ptext0:
   512                           	opt callstack 0
   513  000EF8                     _main:
   514                           	opt callstack 22
   515                           
   516                           ;main.c: 32:     OSCCON = 0x72;
   517                           
   518                           ;incstack = 0
   519  000EF8  0E72               	movlw	114
   520  000EFA  6ED3               	movwf	4051,c	;volatile
   521                           
   522                           ;main.c: 34:     CLCD_Initialize();
   523  000EFC  EC38  F007         	call	_CLCD_Initialize	;wreg free
   524                           
   525                           ;main.c: 35:     initADC();
   526  000F00  ECD0  F008         	call	_initADC	;wreg free
   527                           
   528                           ;main.c: 36:     startADC();
   529  000F04  EC0A  F009         	call	_startADC	;wreg free
   530  000F08                     l1836:
   531                           
   532                           ;main.c: 39:     {;main.c: 40:         sprintf(msgBuffer, "ADC VAL: %04u", adcVal);
   533  000F08  0E88               	movlw	low _msgBuffer
   534  000F0A  0100               	movlb	0	; () banked
   535  000F0C  6F98               	movwf	sprintf@s& (0+255),b
   536  000F0E  0E00               	movlw	high _msgBuffer
   537  000F10  6F99               	movwf	(sprintf@s+1)& (0+255),b
   538  000F12  0E01               	movlw	low STR_1
   539  000F14  6F9A               	movwf	sprintf@fmt& (0+255),b
   540  000F16  0E06               	movlw	high STR_1
   541  000F18  6F9B               	movwf	(sprintf@fmt+1)& (0+255),b
   542  000F1A  C066  F09C         	movff	_adcVal,?_sprintf+4
   543  000F1E  C067  F09D         	movff	_adcVal+1,?_sprintf+5
   544  000F22  ECD6  F007         	call	_sprintf	;wreg free
   545                           
   546                           ;main.c: 41:         CLCD_SetPos(0,0);
   547  000F26  0E00               	movlw	0
   548  000F28  6E04               	movwf	CLCD_SetPos@col,c
   549  000F2A  0E00               	movlw	0
   550  000F2C  ECEF  F008         	call	_CLCD_SetPos
   551                           
   552                           ;main.c: 42:         CLCD_PutS(msgBuffer);
   553  000F30  0E88               	movlw	low _msgBuffer
   554  000F32  6E05               	movwf	CLCD_PutS@str,c
   555  000F34  0E00               	movlw	high _msgBuffer
   556  000F36  6E06               	movwf	CLCD_PutS@str+1,c
   557  000F38  ECBE  F008         	call	_CLCD_PutS	;wreg free
   558                           
   559                           ;main.c: 44:         _delay((unsigned long)((100)*(16000000/4000.0)));
   560  000F3C  0E03               	movlw	3
   561  000F3E  6E5B               	movwf	(??_main+1)& (0+255),c
   562  000F40  0E08               	movlw	8
   563  000F42  6E5A               	movwf	??_main& (0+255),c
   564  000F44  0E77               	movlw	119
   565  000F46                     u997:
   566  000F46  2EE8               	decfsz	wreg,f,c
   567  000F48  D7FE               	bra	u997
   568  000F4A  2E5A               	decfsz	??_main& (0+255),f,c
   569  000F4C  D7FC               	bra	u997
   570  000F4E  2E5B               	decfsz	(??_main+1)& (0+255),f,c
   571  000F50  D7FA               	bra	u997
   572  000F52  F000               	nop	
   573  000F54  D7D9               	goto	l1836
   574  000F56                     __end_of_main:
   575                           	opt callstack 0
   576                           
   577 ;; *************** function _startADC *****************
   578 ;; Defined at:
   579 ;;		line 71 in file "main.c"
   580 ;; Parameters:    Size  Location     Type
   581 ;;		None
   582 ;; Auto vars:     Size  Location     Type
   583 ;;		None
   584 ;; Return value:  Size  Location     Type
   585 ;;                  1    wreg      void 
   586 ;; Registers used:
   587 ;;		wreg, status,2
   588 ;; Tracked objects:
   589 ;;		On entry : 0/0
   590 ;;		On exit  : 0/0
   591 ;;		Unchanged: 0/0
   592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   593 ;;      Params:         0       0       0       0       0       0       0
   594 ;;      Locals:         0       0       0       0       0       0       0
   595 ;;      Temps:          0       0       0       0       0       0       0
   596 ;;      Totals:         0       0       0       0       0       0       0
   597 ;;Total ram usage:        0 bytes
   598 ;; Hardware stack levels used:    1
   599 ;; Hardware stack levels required when called:    1
   600 ;; This function calls:
   601 ;;		Nothing
   602 ;; This function is called by:
   603 ;;		_main
   604 ;; This function uses a non-reentrant model
   605 ;;
   606                           
   607                           	psect	text1
   608  001214                     __ptext1:
   609                           	opt callstack 0
   610  001214                     _startADC:
   611                           	opt callstack 29
   612                           
   613                           ;main.c: 73:     ADCON0 = 0x01;
   614                           
   615                           ;incstack = 0
   616  001214  0E01               	movlw	1
   617  001216  6EC2               	movwf	4034,c	;volatile
   618                           
   619                           ;main.c: 78:     ADCON0bits.GO_DONE = 1;
   620  001218  82C2               	bsf	4034,1,c	;volatile
   621  00121A  0012               	return		;funcret
   622  00121C                     __end_of_startADC:
   623                           	opt callstack 0
   624                           
   625 ;; *************** function _sprintf *****************
   626 ;; Defined at:
   627 ;;		line 9 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
   628 ;; Parameters:    Size  Location     Type
   629 ;;  s               2    0[BANK0 ] PTR unsigned char 
   630 ;;		 -> msgBuffer(16), 
   631 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
   632 ;;		 -> STR_1(14), 
   633 ;; Auto vars:     Size  Location     Type
   634 ;;  f               6   10[BANK0 ] struct _IO_FILE
   635 ;;  ap              2    8[BANK0 ] PTR void [1]
   636 ;;		 -> ?_sprintf(2), 
   637 ;;  ret             2    0        int 
   638 ;; Return value:  Size  Location     Type
   639 ;;                  2    0[BANK0 ] int 
   640 ;; Registers used:
   641 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   642 ;; Tracked objects:
   643 ;;		On entry : 0/0
   644 ;;		On exit  : 0/0
   645 ;;		Unchanged: 0/0
   646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   647 ;;      Params:         0       6       0       0       0       0       0
   648 ;;      Locals:         0      10       0       0       0       0       0
   649 ;;      Temps:          0       0       0       0       0       0       0
   650 ;;      Totals:         0      16       0       0       0       0       0
   651 ;;Total ram usage:       16 bytes
   652 ;; Hardware stack levels used:    1
   653 ;; Hardware stack levels required when called:    8
   654 ;; This function calls:
   655 ;;		_vfprintf
   656 ;; This function is called by:
   657 ;;		_main
   658 ;; This function uses a non-reentrant model
   659 ;;
   660                           
   661                           	psect	text2
   662  000FAC                     __ptext2:
   663                           	opt callstack 0
   664  000FAC                     _sprintf:
   665                           	opt callstack 22
   666                           
   667                           ;incstack = 0
   668  000FAC  0E9C               	movlw	low (?_sprintf+4)
   669  000FAE  0100               	movlb	0	; () banked
   670  000FB0  6FA0               	movwf	sprintf@ap& (0+255),b
   671  000FB2  0E00               	movlw	high (?_sprintf+4)
   672  000FB4  6FA1               	movwf	(sprintf@ap+1)& (0+255),b
   673  000FB6  C098  F0A2         	movff	sprintf@s,sprintf@f
   674  000FBA  C099  F0A3         	movff	sprintf@s+1,sprintf@f+1
   675                           
   676                           ; BSR set to: 0
   677  000FBE  0E00               	movlw	0
   678  000FC0  6FA5               	movwf	(sprintf@f+3)& (0+255),b
   679  000FC2  0E00               	movlw	0
   680  000FC4  6FA4               	movwf	(sprintf@f+2)& (0+255),b
   681                           
   682                           ; BSR set to: 0
   683  000FC6  0E00               	movlw	0
   684  000FC8  6FA7               	movwf	(sprintf@f+5)& (0+255),b
   685  000FCA  0E00               	movlw	0
   686  000FCC  6FA6               	movwf	(sprintf@f+4)& (0+255),b
   687                           
   688                           ; BSR set to: 0
   689  000FCE  0EA2               	movlw	low sprintf@f
   690  000FD0  6E52               	movwf	vfprintf@fp,c
   691  000FD2  0E00               	movlw	high sprintf@f
   692  000FD4  6E53               	movwf	vfprintf@fp+1,c
   693  000FD6  C09A  F054         	movff	sprintf@fmt,vfprintf@fmt
   694  000FDA  C09B  F055         	movff	sprintf@fmt+1,vfprintf@fmt+1
   695  000FDE  0EA0               	movlw	low sprintf@ap
   696  000FE0  6E56               	movwf	vfprintf@ap,c
   697  000FE2  0E00               	movlw	high sprintf@ap
   698  000FE4  6E57               	movwf	vfprintf@ap+1,c
   699  000FE6  ECAB  F007         	call	_vfprintf	;wreg free
   700  000FEA  0100               	movlb	0	; () banked
   701  000FEC  51A4               	movf	(sprintf@f+2)& (0+255),w,b
   702  000FEE  2598               	addwf	sprintf@s& (0+255),w,b
   703  000FF0  6ED9               	movwf	fsr2l,c
   704  000FF2  51A5               	movf	(sprintf@f+3)& (0+255),w,b
   705  000FF4  2199               	addwfc	(sprintf@s+1)& (0+255),w,b
   706  000FF6  6EDA               	movwf	fsr2h,c
   707  000FF8  0E00               	movlw	0
   708  000FFA  6EDF               	movwf	indf2,c
   709                           
   710                           ; BSR set to: 0
   711  000FFC  0012               	return		;funcret
   712  000FFE                     __end_of_sprintf:
   713                           	opt callstack 0
   714                           
   715 ;; *************** function _vfprintf *****************
   716 ;; Defined at:
   717 ;;		line 1368 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   718 ;; Parameters:    Size  Location     Type
   719 ;;  fp              2   81[COMRAM] PTR struct _IO_FILE
   720 ;;		 -> sprintf@f(6), 
   721 ;;  fmt             2   83[COMRAM] PTR const unsigned char 
   722 ;;		 -> STR_1(14), 
   723 ;;  ap              2   85[COMRAM] PTR PTR void 
   724 ;;		 -> sprintf@ap(2), 
   725 ;; Auto vars:     Size  Location     Type
   726 ;;  cfmt            2   87[COMRAM] PTR unsigned char 
   727 ;;		 -> STR_1(14), 
   728 ;; Return value:  Size  Location     Type
   729 ;;                  2   81[COMRAM] int 
   730 ;; Registers used:
   731 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   732 ;; Tracked objects:
   733 ;;		On entry : 0/0
   734 ;;		On exit  : 0/0
   735 ;;		Unchanged: 0/0
   736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   737 ;;      Params:         6       0       0       0       0       0       0
   738 ;;      Locals:         2       0       0       0       0       0       0
   739 ;;      Temps:          0       0       0       0       0       0       0
   740 ;;      Totals:         8       0       0       0       0       0       0
   741 ;;Total ram usage:        8 bytes
   742 ;; Hardware stack levels used:    1
   743 ;; Hardware stack levels required when called:    7
   744 ;; This function calls:
   745 ;;		_vfpfcnvrt
   746 ;; This function is called by:
   747 ;;		_sprintf
   748 ;; This function uses a non-reentrant model
   749 ;;
   750                           
   751                           	psect	text3
   752  000F56                     __ptext3:
   753                           	opt callstack 0
   754  000F56                     _vfprintf:
   755                           	opt callstack 22
   756                           
   757                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);D:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;D:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;D:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   758                           
   759                           ; BSR set to: 0
   760                           ;incstack = 0
   761  000F56  C054  F058         	movff	vfprintf@fmt,vfprintf@cfmt
   762  000F5A  C055  F059         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   763                           
   764                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   765  000F5E  0E00               	movlw	0
   766  000F60  0100               	movlb	0	; () banked
   767  000F62  6F61               	movwf	(_nout+1)& (0+255),b
   768  000F64  0E00               	movlw	0
   769  000F66  6F60               	movwf	_nout& (0+255),b
   770                           
   771                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   772  000F68  D013               	goto	l1728
   773  000F6A                     l1726:
   774                           
   775                           ; BSR set to: 0
   776                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   777  000F6A  C052  F03C         	movff	vfprintf@fp,vfpfcnvrt@fp
   778  000F6E  C053  F03D         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   779  000F72  0E58               	movlw	low vfprintf@cfmt
   780  000F74  6E3E               	movwf	vfpfcnvrt@fmt,c
   781  000F76  0E00               	movlw	high vfprintf@cfmt
   782  000F78  6E3F               	movwf	vfpfcnvrt@fmt+1,c
   783  000F7A  C056  F040         	movff	vfprintf@ap,vfpfcnvrt@ap
   784  000F7E  C057  F041         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   785  000F82  EC08  F003         	call	_vfpfcnvrt	;wreg free
   786  000F86  503C               	movf	?_vfpfcnvrt,w,c
   787  000F88  0100               	movlb	0	; () banked
   788  000F8A  2760               	addwf	_nout& (0+255),f,b
   789  000F8C  503D               	movf	?_vfpfcnvrt+1,w,c
   790  000F8E  2361               	addwfc	(_nout+1)& (0+255),f,b
   791  000F90                     l1728:
   792                           
   793                           ; BSR set to: 0
   794                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   795  000F90  C058  FFF6         	movff	vfprintf@cfmt,tblptrl
   796  000F94  C059  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   797  000F98                     	if	0	;tblptru may be non-zero
   798  000F98                     	endif
   799  000F98                     	if	0	;tblptru may be non-zero
   800  000F98                     	endif
   801  000F98  0008               	tblrd		*
   802  000F9A  50F5               	movf	tablat,w,c
   803  000F9C  0900               	iorlw	0
   804  000F9E  A4D8               	btfss	status,2,c
   805  000FA0  D7E4               	goto	l1726
   806                           
   807                           ; BSR set to: 0
   808                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   809  000FA2  C060  F052         	movff	_nout,?_vfprintf
   810  000FA6  C061  F053         	movff	_nout+1,?_vfprintf+1
   811                           
   812                           ; BSR set to: 0
   813  000FAA  0012               	return		;funcret
   814  000FAC                     __end_of_vfprintf:
   815                           	opt callstack 0
   816                           
   817 ;; *************** function _vfpfcnvrt *****************
   818 ;; Defined at:
   819 ;;		line 670 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   820 ;; Parameters:    Size  Location     Type
   821 ;;  fp              2   59[COMRAM] PTR struct _IO_FILE
   822 ;;		 -> sprintf@f(6), 
   823 ;;  fmt             2   61[COMRAM] PTR PTR unsigned char 
   824 ;;		 -> vfprintf@cfmt(2), 
   825 ;;  ap              2   63[COMRAM] PTR PTR void 
   826 ;;		 -> sprintf@ap(2), 
   827 ;; Auto vars:     Size  Location     Type
   828 ;;  llu             8   69[COMRAM] unsigned long long 
   829 ;;  ll              8    0        long long 
   830 ;;  f               4    0        long long 
   831 ;;  vp              3    0        PTR void 
   832 ;;  ct              3    0        unsigned char [3]
   833 ;;  cp              3    0        PTR unsigned char 
   834 ;;  done            2   77[COMRAM] int 
   835 ;;  i               2    0        int 
   836 ;;  c               1    0        unsigned char 
   837 ;; Return value:  Size  Location     Type
   838 ;;                  2   59[COMRAM] int 
   839 ;; Registers used:
   840 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   841 ;; Tracked objects:
   842 ;;		On entry : 0/0
   843 ;;		On exit  : 0/0
   844 ;;		Unchanged: 0/0
   845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   846 ;;      Params:         6       0       0       0       0       0       0
   847 ;;      Locals:        12       0       0       0       0       0       0
   848 ;;      Temps:          4       0       0       0       0       0       0
   849 ;;      Totals:        22       0       0       0       0       0       0
   850 ;;Total ram usage:       22 bytes
   851 ;; Hardware stack levels used:    1
   852 ;; Hardware stack levels required when called:    6
   853 ;; This function calls:
   854 ;;		_atoi
   855 ;;		_fputc
   856 ;;		_isdigit
   857 ;;		_utoa
   858 ;; This function is called by:
   859 ;;		_vfprintf
   860 ;; This function uses a non-reentrant model
   861 ;;
   862                           
   863                           	psect	text4
   864  000610                     __ptext4:
   865                           	opt callstack 0
   866  000610                     _vfpfcnvrt:
   867                           	opt callstack 22
   868                           
   869                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);D:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;D:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;D:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;D:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   870                           
   871                           ; BSR set to: 0
   872                           ;incstack = 0
   873  000610  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   874  000614  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   875  000618  CFDE FFF6          	movff	postinc2,tblptrl
   876  00061C  CFDD FFF7          	movff	postdec2,tblptrh
   877  000620                     	if	0	;tblptru may be non-zero
   878  000620                     	endif
   879  000620                     	if	0	;tblptru may be non-zero
   880  000620                     	endif
   881  000620  0008               	tblrd		*
   882  000622  50F5               	movf	tablat,w,c
   883  000624  0A25               	xorlw	37
   884  000626  A4D8               	btfss	status,2,c
   885  000628  D139               	goto	l1690
   886                           
   887                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
   888  00062A  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   889  00062E  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   890  000632  2ADE               	incf	postinc2,f,c
   891  000634  0E00               	movlw	0
   892  000636  22DD               	addwfc	postdec2,f,c
   893                           
   894                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
   895  000638  0E00               	movlw	0
   896  00063A  0100               	movlb	0	; () banked
   897  00063C  6F63               	movwf	(_width+1)& (0+255),b
   898  00063E  0E00               	movlw	0
   899  000640  6F62               	movwf	_width& (0+255),b
   900  000642  C062  F05C         	movff	_width,_flags
   901  000646  C063  F05D         	movff	_width+1,_flags+1
   902                           
   903                           ; BSR set to: 0
   904                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
   905  00064A  6964               	setf	_prec& (0+255),b
   906  00064C  6965               	setf	(_prec+1)& (0+255),b
   907                           
   908                           ; BSR set to: 0
   909                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 688:       
      +                            done = 0;
   910  00064E  0E00               	movlw	0
   911  000650  6E4F               	movwf	vfpfcnvrt@done+1,c
   912  000652  0E00               	movlw	0
   913  000654  D014               	goto	L1
   914  000656                     l1618:
   915                           
   916                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 692:       
      +                                        flags |= (1 << 0);
   917  000656  805C               	bsf	_flags,0,c
   918  000658                     l1620:
   919                           
   920                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 693:       
      +                                        ++*fmt;
   921  000658  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   922  00065C  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   923  000660  2ADE               	incf	postinc2,f,c
   924  000662  0E00               	movlw	0
   925  000664  22DD               	addwfc	postdec2,f,c
   926                           
   927                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 694:       
      +                                        break;
   928  000666  D02E               	goto	l1644
   929  000668                     l1622:
   930                           
   931                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 696:       
      +                                        flags |= (1 << 1);
   932  000668  825C               	bsf	_flags,1,c
   933  00066A  D7F6               	goto	l1620
   934  00066C                     l1626:
   935                           
   936                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 700:       
      +                                        flags |= (1 << 2);
   937  00066C  845C               	bsf	_flags,2,c
   938  00066E  D7F4               	goto	l1620
   939  000670                     l1630:
   940                           
   941                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 704:       
      +                                        flags |= (1 << 3);
   942  000670  865C               	bsf	_flags,3,c
   943  000672  D7F2               	goto	l1620
   944  000674                     l1634:
   945                           
   946                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 708:       
      +                                        flags |= (1 << 4);
   947  000674  885C               	bsf	_flags,4,c
   948  000676  D7F0               	goto	l1620
   949  000678                     l1638:
   950                           
   951                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 712:       
      +                                        done = 1;
   952  000678  0E00               	movlw	0
   953  00067A  6E4F               	movwf	vfpfcnvrt@done+1,c
   954  00067C  0E01               	movlw	1
   955  00067E                     L1:
   956  00067E  6E4E               	movwf	vfpfcnvrt@done,c
   957                           
   958                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 713:       
      +                                        break;
   959  000680  D021               	goto	l1644
   960  000682                     l1642:
   961  000682  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   962  000686  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   963  00068A  CFDE FFF6          	movff	postinc2,tblptrl
   964  00068E  CFDD FFF7          	movff	postdec2,tblptrh
   965  000692                     	if	0	;tblptru may be non-zero
   966  000692                     	endif
   967  000692                     	if	0	;tblptru may be non-zero
   968  000692                     	endif
   969  000692  0008               	tblrd		*
   970  000694  50F5               	movf	tablat,w,c
   971  000696  6E42               	movwf	??_vfpfcnvrt& (0+255),c
   972  000698  6A43               	clrf	(??_vfpfcnvrt+1)& (0+255),c
   973                           
   974                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   975                           ; Switch size 1, requested type "simple"
   976                           ; Number of cases is 1, Range of values is 0 to 0
   977                           ; switch strategies available:
   978                           ; Name         Instructions Cycles
   979                           ; simple_byte            4     3 (average)
   980                           ;	Chosen strategy is simple_byte
   981  00069A  5043               	movf	??_vfpfcnvrt+1,w,c
   982  00069C  0A00               	xorlw	0	; case 0
   983  00069E  A4D8               	btfss	status,2,c
   984  0006A0  D7EB               	goto	l1638
   985                           
   986                           ; Switch size 1, requested type "simple"
   987                           ; Number of cases is 5, Range of values is 32 to 48
   988                           ; switch strategies available:
   989                           ; Name         Instructions Cycles
   990                           ; simple_byte           16     9 (average)
   991                           ;	Chosen strategy is simple_byte
   992  0006A2  5042               	movf	??_vfpfcnvrt,w,c
   993  0006A4  0A20               	xorlw	32	; case 32
   994  0006A6  B4D8               	btfsc	status,2,c
   995  0006A8  D7E3               	goto	l1630
   996  0006AA  0A03               	xorlw	3	; case 35
   997  0006AC  B4D8               	btfsc	status,2,c
   998  0006AE  D7E2               	goto	l1634
   999  0006B0  0A08               	xorlw	8	; case 43
  1000  0006B2  B4D8               	btfsc	status,2,c
  1001  0006B4  D7DB               	goto	l1626
  1002  0006B6  0A06               	xorlw	6	; case 45
  1003  0006B8  B4D8               	btfsc	status,2,c
  1004  0006BA  D7CD               	goto	l1618
  1005  0006BC  0A1D               	xorlw	29	; case 48
  1006  0006BE  B4D8               	btfsc	status,2,c
  1007  0006C0  D7D3               	goto	l1622
  1008  0006C2  D7DA               	goto	l1638
  1009  0006C4                     l1644:
  1010                           
  1011                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 689:       
      +                            while (!done) {
  1012  0006C4  504E               	movf	vfpfcnvrt@done,w,c
  1013  0006C6  104F               	iorwf	vfpfcnvrt@done+1,w,c
  1014  0006C8  B4D8               	btfsc	status,2,c
  1015  0006CA  D7DB               	goto	l1642
  1016                           
  1017                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 716:       
      +                            if (flags & (1 << 0)) {
  1018  0006CC  B05C               	btfsc	_flags,0,c
  1019                           
  1020                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 717:       
      +                                flags &= ~(1 << 1);
  1021  0006CE  925C               	bcf	_flags,1,c
  1022                           
  1023                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
  1024  0006D0  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1025  0006D4  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1026  0006D8  CFDE FFF6          	movff	postinc2,tblptrl
  1027  0006DC  CFDD FFF7          	movff	postdec2,tblptrh
  1028  0006E0                     	if	0	;tblptru may be non-zero
  1029  0006E0                     	endif
  1030  0006E0                     	if	0	;tblptru may be non-zero
  1031  0006E0                     	endif
  1032  0006E0  0008               	tblrd		*
  1033  0006E2  50F5               	movf	tablat,w,c
  1034  0006E4  0A2A               	xorlw	42
  1035  0006E6  A4D8               	btfss	status,2,c
  1036  0006E8  D024               	goto	l1656
  1037                           
  1038                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
  1039  0006EA  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1040  0006EE  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1041  0006F2  2ADE               	incf	postinc2,f,c
  1042  0006F4  0E00               	movlw	0
  1043  0006F6  22DD               	addwfc	postdec2,f,c
  1044                           
  1045                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1046  0006F8  C040  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1047  0006FC  C041  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1048  000700  CFDF F042          	movff	indf2,??_vfpfcnvrt
  1049  000704  0E02               	movlw	2
  1050  000706  26DE               	addwf	postinc2,f,c
  1051  000708  CFDF F043          	movff	indf2,??_vfpfcnvrt+1
  1052  00070C  0E00               	movlw	0
  1053  00070E  22DD               	addwfc	postdec2,f,c
  1054  000710  C042  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1055  000714  C043  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1056  000718  CFDE F062          	movff	postinc2,_width
  1057  00071C  CFDD F063          	movff	postdec2,_width+1
  1058                           
  1059                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  1060  000720  0100               	movlb	0	; () banked
  1061  000722  AF63               	btfss	(_width+1)& (0+255),7,b
  1062  000724  D03F               	goto	u920
  1063                           
  1064                           ; BSR set to: 0
  1065                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  1066  000726  805C               	bsf	_flags,0,c
  1067                           
  1068                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  1069  000728  6D62               	negf	_width& (0+255),b
  1070  00072A  1F63               	comf	(_width+1)& (0+255),f,b
  1071  00072C  B0D8               	btfsc	status,0,c
  1072  00072E  2B63               	incf	(_width+1)& (0+255),f,b
  1073  000730  D039               	goto	u920
  1074  000732                     l1656:
  1075                           
  1076                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  1077  000732  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1078  000736  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1079  00073A  CFDE F008          	movff	postinc2,atoi@s
  1080  00073E  CFDD F009          	movff	postdec2,atoi@s+1
  1081  000742  EC3F  F005         	call	_atoi	;wreg free
  1082  000746  C008  F062         	movff	?_atoi,_width
  1083  00074A  C009  F063         	movff	?_atoi+1,_width+1
  1084                           
  1085                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  1086  00074E  D007               	goto	l1660
  1087  000750                     l1658:
  1088                           
  1089                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  1090  000750  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1091  000754  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1092  000758  2ADE               	incf	postinc2,f,c
  1093  00075A  0E00               	movlw	0
  1094  00075C  22DD               	addwfc	postdec2,f,c
  1095  00075E                     l1660:
  1096  00075E  0ED0               	movlw	208
  1097  000760  6E42               	movwf	??_vfpfcnvrt& (0+255),c
  1098  000762  0EFF               	movlw	255
  1099  000764  6E43               	movwf	(??_vfpfcnvrt+1)& (0+255),c
  1100  000766  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1101  00076A  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1102  00076E  CFDE FFF6          	movff	postinc2,tblptrl
  1103  000772  CFDD FFF7          	movff	postdec2,tblptrh
  1104  000776                     	if	0	;tblptru may be non-zero
  1105  000776                     	endif
  1106  000776                     	if	0	;tblptru may be non-zero
  1107  000776                     	endif
  1108  000776  0008               	tblrd		*
  1109  000778  50F5               	movf	tablat,w,c
  1110  00077A  6E44               	movwf	(??_vfpfcnvrt+2)& (0+255),c
  1111  00077C  6A45               	clrf	(??_vfpfcnvrt+3)& (0+255),c
  1112  00077E  5042               	movf	??_vfpfcnvrt,w,c
  1113  000780  2644               	addwf	??_vfpfcnvrt+2,f,c
  1114  000782  5043               	movf	??_vfpfcnvrt+1,w,c
  1115  000784  2245               	addwfc	??_vfpfcnvrt+3,f,c
  1116  000786  5045               	movf	??_vfpfcnvrt+3,w,c
  1117  000788  E106               	bnz	u900
  1118  00078A  0E0A               	movlw	10
  1119  00078C  5C44               	subwf	??_vfpfcnvrt+2,w,c
  1120  00078E  B0D8               	btfsc	status,0,c
  1121  000790  D002               	goto	u900
  1122  000792  0E01               	movlw	1
  1123  000794  D001               	goto	u910
  1124  000796                     u900:
  1125  000796  0E00               	movlw	0
  1126  000798                     u910:
  1127  000798  6E50               	movwf	_vfpfcnvrt$583,c
  1128  00079A  6A51               	clrf	_vfpfcnvrt$583+1,c
  1129  00079C  5050               	movf	_vfpfcnvrt$583,w,c
  1130  00079E  1051               	iorwf	_vfpfcnvrt$583+1,w,c
  1131  0007A0  A4D8               	btfss	status,2,c
  1132  0007A2  D7D6               	goto	l1658
  1133  0007A4                     u920:
  1134                           
  1135                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1182:      
      +                             if (*fmt[0] == 'u') {
  1136  0007A4  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1137  0007A8  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1138  0007AC  CFDE FFF6          	movff	postinc2,tblptrl
  1139  0007B0  CFDD FFF7          	movff	postdec2,tblptrh
  1140  0007B4                     	if	0	;tblptru may be non-zero
  1141  0007B4                     	endif
  1142  0007B4                     	if	0	;tblptru may be non-zero
  1143  0007B4                     	endif
  1144  0007B4  0008               	tblrd		*
  1145  0007B6  50F5               	movf	tablat,w,c
  1146  0007B8  0A75               	xorlw	117
  1147  0007BA  A4D8               	btfss	status,2,c
  1148  0007BC  D040               	goto	l1674
  1149                           
  1150                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1184:      
      +                                 ++*fmt;
  1151  0007BE  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1152  0007C2  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1153  0007C6  2ADE               	incf	postinc2,f,c
  1154  0007C8  0E00               	movlw	0
  1155  0007CA  22DD               	addwfc	postdec2,f,c
  1156                           
  1157                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1185:      
      +                                 llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsig
      +                          ned int)0));
  1158  0007CC  C040  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1159  0007D0  C041  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1160  0007D4  CFDF F042          	movff	indf2,??_vfpfcnvrt
  1161  0007D8  0E02               	movlw	2
  1162  0007DA  26DE               	addwf	postinc2,f,c
  1163  0007DC  CFDF F043          	movff	indf2,??_vfpfcnvrt+1
  1164  0007E0  0E00               	movlw	0
  1165  0007E2  22DD               	addwfc	postdec2,f,c
  1166  0007E4  C042  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1167  0007E8  C043  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1168  0007EC  CFDE F044          	movff	postinc2,??_vfpfcnvrt+2
  1169  0007F0  CFDD F045          	movff	postdec2,??_vfpfcnvrt+3
  1170  0007F4  C044  F046         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
  1171  0007F8  C045  F047         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
  1172  0007FC  6A48               	clrf	vfpfcnvrt@llu+2,c
  1173  0007FE  6A49               	clrf	vfpfcnvrt@llu+3,c
  1174  000800  6A4A               	clrf	vfpfcnvrt@llu+4,c
  1175  000802  6A4B               	clrf	vfpfcnvrt@llu+5,c
  1176  000804  6A4C               	clrf	vfpfcnvrt@llu+6,c
  1177  000806  6A4D               	clrf	vfpfcnvrt@llu+7,c
  1178                           
  1179                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1187:      
      +                                 return utoa(fp, llu);
  1180  000808  C03C  F01C         	movff	vfpfcnvrt@fp,utoa@fp
  1181  00080C  C03D  F01D         	movff	vfpfcnvrt@fp+1,utoa@fp+1
  1182  000810  C046  F01E         	movff	vfpfcnvrt@llu,utoa@d
  1183  000814  C047  F01F         	movff	vfpfcnvrt@llu+1,utoa@d+1
  1184  000818  C048  F020         	movff	vfpfcnvrt@llu+2,utoa@d+2
  1185  00081C  C049  F021         	movff	vfpfcnvrt@llu+3,utoa@d+3
  1186  000820  C04A  F022         	movff	vfpfcnvrt@llu+4,utoa@d+4
  1187  000824  C04B  F023         	movff	vfpfcnvrt@llu+5,utoa@d+5
  1188  000828  C04C  F024         	movff	vfpfcnvrt@llu+6,utoa@d+6
  1189  00082C  C04D  F025         	movff	vfpfcnvrt@llu+7,utoa@d+7
  1190  000830  EC68  F004         	call	_utoa	;wreg free
  1191  000834  C01C  F03C         	movff	?_utoa,?_vfpfcnvrt
  1192  000838  C01D  F03D         	movff	?_utoa+1,?_vfpfcnvrt+1
  1193  00083C  0012               	return	
  1194  00083E                     l1674:
  1195                           
  1196                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1197  00083E  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1198  000842  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1199  000846  CFDE FFF6          	movff	postinc2,tblptrl
  1200  00084A  CFDD FFF7          	movff	postdec2,tblptrh
  1201  00084E                     	if	0	;tblptru may be non-zero
  1202  00084E                     	endif
  1203  00084E                     	if	0	;tblptru may be non-zero
  1204  00084E                     	endif
  1205  00084E  0008               	tblrd		*
  1206  000850  50F5               	movf	tablat,w,c
  1207  000852  0A25               	xorlw	37
  1208  000854  A4D8               	btfss	status,2,c
  1209  000856  D016               	goto	l1684
  1210                           
  1211                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1212  000858  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1213  00085C  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1214  000860  2ADE               	incf	postinc2,f,c
  1215  000862  0E00               	movlw	0
  1216  000864  22DD               	addwfc	postdec2,f,c
  1217                           
  1218                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1219  000866  0E00               	movlw	0
  1220  000868  6E02               	movwf	fputc@c+1,c
  1221  00086A  0E25               	movlw	37
  1222  00086C  6E01               	movwf	fputc@c,c
  1223  00086E  C03C  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1224  000872  C03D  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1225  000876  EC9D  F006         	call	_fputc	;wreg free
  1226  00087A                     l1680:
  1227                           
  1228                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1229  00087A  0E00               	movlw	0
  1230  00087C  6E3D               	movwf	?_vfpfcnvrt+1,c
  1231  00087E  0E01               	movlw	1
  1232  000880  6E3C               	movwf	?_vfpfcnvrt,c
  1233  000882  0012               	return	
  1234  000884                     l1684:
  1235                           
  1236                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1237  000884  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1238  000888  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1239  00088C  2ADE               	incf	postinc2,f,c
  1240  00088E  0E00               	movlw	0
  1241  000890  22DD               	addwfc	postdec2,f,c
  1242                           
  1243                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1244  000892  0E00               	movlw	0
  1245  000894  6E3D               	movwf	?_vfpfcnvrt+1,c
  1246  000896  0E00               	movlw	0
  1247  000898  6E3C               	movwf	?_vfpfcnvrt,c
  1248  00089A  0012               	return	
  1249  00089C                     l1690:
  1250                           
  1251                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1252  00089C  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1253  0008A0  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1254  0008A4  CFDE FFF6          	movff	postinc2,tblptrl
  1255  0008A8  CFDD FFF7          	movff	postdec2,tblptrh
  1256  0008AC                     	if	0	;tblptru may be non-zero
  1257  0008AC                     	endif
  1258  0008AC                     	if	0	;tblptru may be non-zero
  1259  0008AC                     	endif
  1260  0008AC  0008               	tblrd		*
  1261  0008AE  50F5               	movf	tablat,w,c
  1262  0008B0  6E01               	movwf	fputc@c,c
  1263  0008B2  6A02               	clrf	fputc@c+1,c
  1264  0008B4  C03C  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1265  0008B8  C03D  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1266  0008BC  EC9D  F006         	call	_fputc	;wreg free
  1267                           
  1268                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1269  0008C0  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1270  0008C4  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1271  0008C8  2ADE               	incf	postinc2,f,c
  1272  0008CA  0E00               	movlw	0
  1273  0008CC  22DD               	addwfc	postdec2,f,c
  1274  0008CE  D7D5               	goto	l1680
  1275  0008D0                     __end_of_vfpfcnvrt:
  1276                           	opt callstack 0
  1277                           
  1278 ;; *************** function _utoa *****************
  1279 ;; Defined at:
  1280 ;;		line 593 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1281 ;; Parameters:    Size  Location     Type
  1282 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1283 ;;		 -> sprintf@f(6), 
  1284 ;;  d               8   29[COMRAM] unsigned long long 
  1285 ;; Auto vars:     Size  Location     Type
  1286 ;;  n               8   49[COMRAM] unsigned long long 
  1287 ;;  i               2   57[COMRAM] int 
  1288 ;;  w               2   47[COMRAM] int 
  1289 ;;  p               2   45[COMRAM] int 
  1290 ;; Return value:  Size  Location     Type
  1291 ;;                  2   27[COMRAM] int 
  1292 ;; Registers used:
  1293 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1294 ;; Tracked objects:
  1295 ;;		On entry : 0/0
  1296 ;;		On exit  : 0/0
  1297 ;;		Unchanged: 0/0
  1298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1299 ;;      Params:        10       0       0       0       0       0       0
  1300 ;;      Locals:        14       0       0       0       0       0       0
  1301 ;;      Temps:          8       0       0       0       0       0       0
  1302 ;;      Totals:        32       0       0       0       0       0       0
  1303 ;;Total ram usage:       32 bytes
  1304 ;; Hardware stack levels used:    1
  1305 ;; Hardware stack levels required when called:    5
  1306 ;; This function calls:
  1307 ;;		___lodiv
  1308 ;;		___lomod
  1309 ;;		_pad
  1310 ;; This function is called by:
  1311 ;;		_vfpfcnvrt
  1312 ;; This function uses a non-reentrant model
  1313 ;;
  1314                           
  1315                           	psect	text5
  1316  0008D0                     __ptext5:
  1317                           	opt callstack 0
  1318  0008D0                     _utoa:
  1319                           	opt callstack 22
  1320                           
  1321                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 593: static
      +                           int utoa(FILE *fp, unsigned long long d);D:\Program Files (x86)\Microchip\xc8\v2.05\pic
      +                          \sources\c99\common\doprnt.c: 594: {;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c99\common\doprnt.c: 595:     int i, p, w;;D:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 596:     unsigned long long n;;D:\Program Files (x86)
      +                          \Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 599:     if (!(prec < 0)) {
  1322                           
  1323                           ;incstack = 0
  1324  0008D0  0100               	movlb	0	; () banked
  1325  0008D2  AF65               	btfss	(_prec+1)& (0+255),7,b
  1326                           
  1327                           ; BSR set to: 0
  1328                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 600:       
      +                            flags &= ~(1 << 1);
  1329  0008D4  925C               	bcf	_flags,1,c
  1330                           
  1331                           ; BSR set to: 0
  1332                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 602:     p 
      +                          = (0 < prec) ? prec : 1;
  1333  0008D6  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1334  0008D8  D005               	goto	u720
  1335  0008DA  5165               	movf	(_prec+1)& (0+255),w,b
  1336  0008DC  E108               	bnz	l139
  1337  0008DE  0564               	decf	_prec& (0+255),w,b
  1338  0008E0  B0D8               	btfsc	status,0,c
  1339  0008E2  D005               	goto	l139
  1340  0008E4                     u720:
  1341                           
  1342                           ; BSR set to: 0
  1343  0008E4  0E00               	movlw	0
  1344  0008E6  6E2F               	movwf	utoa@p+1,c
  1345  0008E8  0E01               	movlw	1
  1346  0008EA  6E2E               	movwf	utoa@p,c
  1347  0008EC  D004               	goto	l141
  1348  0008EE                     l139:
  1349                           
  1350                           ; BSR set to: 0
  1351  0008EE  C064  F02E         	movff	_prec,utoa@p
  1352  0008F2  C065  F02F         	movff	_prec+1,utoa@p+1
  1353  0008F6                     l141:
  1354                           
  1355                           ; BSR set to: 0
  1356                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 603:     w 
      +                          = width;
  1357  0008F6  C062  F030         	movff	_width,utoa@w
  1358  0008FA  C063  F031         	movff	_width+1,utoa@w+1
  1359                           
  1360                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 606:     n 
      +                          = d;
  1361  0008FE  C01E  F032         	movff	utoa@d,utoa@n
  1362  000902  C01F  F033         	movff	utoa@d+1,utoa@n+1
  1363  000906  C020  F034         	movff	utoa@d+2,utoa@n+2
  1364  00090A  C021  F035         	movff	utoa@d+3,utoa@n+3
  1365  00090E  C022  F036         	movff	utoa@d+4,utoa@n+4
  1366  000912  C023  F037         	movff	utoa@d+5,utoa@n+5
  1367  000916  C024  F038         	movff	utoa@d+6,utoa@n+6
  1368  00091A  C025  F039         	movff	utoa@d+7,utoa@n+7
  1369                           
  1370                           ; BSR set to: 0
  1371                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 607:     i 
      +                          = sizeof(dbuf) - 1;
  1372  00091E  0E00               	movlw	0
  1373  000920  6E3B               	movwf	utoa@i+1,c
  1374  000922  0E1F               	movlw	31
  1375  000924  6E3A               	movwf	utoa@i,c
  1376                           
  1377                           ; BSR set to: 0
  1378                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 608:     db
      +                          uf[i] = '\0';
  1379  000926  0E00               	movlw	0
  1380  000928  6F87               	movwf	(_dbuf+31)& (0+255),b
  1381                           
  1382                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 609:     wh
      +                          ile (i && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1383  00092A  D076               	goto	l1534
  1384  00092C                     l1524:
  1385                           
  1386                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 610:       
      +                            --i;
  1387  00092C  063A               	decf	utoa@i,f,c
  1388  00092E  A0D8               	btfss	status,0,c
  1389  000930  063B               	decf	utoa@i+1,f,c
  1390                           
  1391                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 611:       
      +                            dbuf[i] = '0' + (n % 10);
  1392  000932  0E68               	movlw	low _dbuf
  1393  000934  243A               	addwf	utoa@i,w,c
  1394  000936  6ED9               	movwf	fsr2l,c
  1395  000938  0E00               	movlw	high _dbuf
  1396  00093A  203B               	addwfc	utoa@i+1,w,c
  1397  00093C  6EDA               	movwf	fsr2h,c
  1398  00093E  C032  F001         	movff	utoa@n,___lomod@dividend
  1399  000942  C033  F002         	movff	utoa@n+1,___lomod@dividend+1
  1400  000946  C034  F003         	movff	utoa@n+2,___lomod@dividend+2
  1401  00094A  C035  F004         	movff	utoa@n+3,___lomod@dividend+3
  1402  00094E  C036  F005         	movff	utoa@n+4,___lomod@dividend+4
  1403  000952  C037  F006         	movff	utoa@n+5,___lomod@dividend+5
  1404  000956  C038  F007         	movff	utoa@n+6,___lomod@dividend+6
  1405  00095A  C039  F008         	movff	utoa@n+7,___lomod@dividend+7
  1406  00095E  0E0A               	movlw	10
  1407  000960  6E09               	movwf	___lomod@divisor,c
  1408  000962  0E00               	movlw	0
  1409  000964  6E0A               	movwf	___lomod@divisor+1,c
  1410  000966  0E00               	movlw	0
  1411  000968  6E0B               	movwf	___lomod@divisor+2,c
  1412  00096A  0E00               	movlw	0
  1413  00096C  6E0C               	movwf	___lomod@divisor+3,c
  1414  00096E  0E00               	movlw	0
  1415  000970  6E0D               	movwf	___lomod@divisor+4,c
  1416  000972  0E00               	movlw	0
  1417  000974  6E0E               	movwf	___lomod@divisor+5,c
  1418  000976  0E00               	movlw	0
  1419  000978  6E0F               	movwf	___lomod@divisor+6,c
  1420  00097A  0E00               	movlw	0
  1421  00097C  6E10               	movwf	___lomod@divisor+7,c
  1422  00097E  EC46  F006         	call	___lomod	;wreg free
  1423  000982  C001  F026         	movff	?___lomod,??_utoa
  1424  000986  C002  F027         	movff	?___lomod+1,??_utoa+1
  1425  00098A  C003  F028         	movff	?___lomod+2,??_utoa+2
  1426  00098E  C004  F029         	movff	?___lomod+3,??_utoa+3
  1427  000992  C005  F02A         	movff	?___lomod+4,??_utoa+4
  1428  000996  C006  F02B         	movff	?___lomod+5,??_utoa+5
  1429  00099A  C007  F02C         	movff	?___lomod+6,??_utoa+6
  1430  00099E  C008  F02D         	movff	?___lomod+7,??_utoa+7
  1431  0009A2  5026               	movf	??_utoa,w,c
  1432  0009A4  0F30               	addlw	48
  1433  0009A6  6EDF               	movwf	indf2,c
  1434                           
  1435                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 612:       
      +                            --p;
  1436  0009A8  062E               	decf	utoa@p,f,c
  1437  0009AA  A0D8               	btfss	status,0,c
  1438  0009AC  062F               	decf	utoa@p+1,f,c
  1439                           
  1440                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 613:       
      +                            --w;
  1441  0009AE  0630               	decf	utoa@w,f,c
  1442  0009B0  A0D8               	btfss	status,0,c
  1443  0009B2  0631               	decf	utoa@w+1,f,c
  1444                           
  1445                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 614:       
      +                            n = n / 10;
  1446  0009B4  C032  F001         	movff	utoa@n,___lodiv@dividend
  1447  0009B8  C033  F002         	movff	utoa@n+1,___lodiv@dividend+1
  1448  0009BC  C034  F003         	movff	utoa@n+2,___lodiv@dividend+2
  1449  0009C0  C035  F004         	movff	utoa@n+3,___lodiv@dividend+3
  1450  0009C4  C036  F005         	movff	utoa@n+4,___lodiv@dividend+4
  1451  0009C8  C037  F006         	movff	utoa@n+5,___lodiv@dividend+5
  1452  0009CC  C038  F007         	movff	utoa@n+6,___lodiv@dividend+6
  1453  0009D0  C039  F008         	movff	utoa@n+7,___lodiv@dividend+7
  1454  0009D4  0E0A               	movlw	10
  1455  0009D6  6E09               	movwf	___lodiv@divisor,c
  1456  0009D8  0E00               	movlw	0
  1457  0009DA  6E0A               	movwf	___lodiv@divisor+1,c
  1458  0009DC  0E00               	movlw	0
  1459  0009DE  6E0B               	movwf	___lodiv@divisor+2,c
  1460  0009E0  0E00               	movlw	0
  1461  0009E2  6E0C               	movwf	___lodiv@divisor+3,c
  1462  0009E4  0E00               	movlw	0
  1463  0009E6  6E0D               	movwf	___lodiv@divisor+4,c
  1464  0009E8  0E00               	movlw	0
  1465  0009EA  6E0E               	movwf	___lodiv@divisor+5,c
  1466  0009EC  0E00               	movlw	0
  1467  0009EE  6E0F               	movwf	___lodiv@divisor+6,c
  1468  0009F0  0E00               	movlw	0
  1469  0009F2  6E10               	movwf	___lodiv@divisor+7,c
  1470  0009F4  ECDF  F005         	call	___lodiv	;wreg free
  1471  0009F8  C001  F032         	movff	?___lodiv,utoa@n
  1472  0009FC  C002  F033         	movff	?___lodiv+1,utoa@n+1
  1473  000A00  C003  F034         	movff	?___lodiv+2,utoa@n+2
  1474  000A04  C004  F035         	movff	?___lodiv+3,utoa@n+3
  1475  000A08  C005  F036         	movff	?___lodiv+4,utoa@n+4
  1476  000A0C  C006  F037         	movff	?___lodiv+5,utoa@n+5
  1477  000A10  C007  F038         	movff	?___lodiv+6,utoa@n+6
  1478  000A14  C008  F039         	movff	?___lodiv+7,utoa@n+7
  1479  000A18                     l1534:
  1480                           
  1481                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 609:     wh
      +                          ile (i && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1482  000A18  503A               	movf	utoa@i,w,c
  1483  000A1A  103B               	iorwf	utoa@i+1,w,c
  1484  000A1C  B4D8               	btfsc	status,2,c
  1485  000A1E  D01A               	goto	u770
  1486  000A20  5032               	movf	utoa@n,w,c
  1487  000A22  1033               	iorwf	utoa@n+1,w,c
  1488  000A24  1034               	iorwf	utoa@n+2,w,c
  1489  000A26  1035               	iorwf	utoa@n+3,w,c
  1490  000A28  1036               	iorwf	utoa@n+4,w,c
  1491  000A2A  1037               	iorwf	utoa@n+5,w,c
  1492  000A2C  1038               	iorwf	utoa@n+6,w,c
  1493  000A2E  1039               	iorwf	utoa@n+7,w,c
  1494  000A30  A4D8               	btfss	status,2,c
  1495  000A32  D77C               	goto	l1524
  1496  000A34  BE2F               	btfsc	utoa@p+1,7,c
  1497  000A36  D005               	goto	u750
  1498  000A38  502F               	movf	utoa@p+1,w,c
  1499  000A3A  E102               	bnz	u751
  1500  000A3C  042E               	decf	utoa@p,w,c
  1501  000A3E  B0D8               	btfsc	status,0,c
  1502  000A40                     u751:
  1503  000A40  D775               	goto	l1524
  1504  000A42                     u750:
  1505  000A42  BE31               	btfsc	utoa@w+1,7,c
  1506  000A44  D007               	goto	u770
  1507  000A46  5031               	movf	utoa@w+1,w,c
  1508  000A48  E103               	bnz	u760
  1509  000A4A  0430               	decf	utoa@w,w,c
  1510  000A4C  A0D8               	btfss	status,0,c
  1511  000A4E  D002               	goto	u770
  1512  000A50                     u760:
  1513  000A50  B25C               	btfsc	_flags,1,c
  1514  000A52  D76C               	goto	l1524
  1515  000A54                     u770:
  1516                           
  1517                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 618:     re
      +                          turn pad(fp, &dbuf[i], w);
  1518  000A54  C01C  F011         	movff	utoa@fp,pad@fp
  1519  000A58  C01D  F012         	movff	utoa@fp+1,pad@fp+1
  1520  000A5C  0E68               	movlw	low _dbuf
  1521  000A5E  243A               	addwf	utoa@i,w,c
  1522  000A60  6E13               	movwf	pad@buf,c
  1523  000A62  0E00               	movlw	high _dbuf
  1524  000A64  203B               	addwfc	utoa@i+1,w,c
  1525  000A66  6E14               	movwf	pad@buf+1,c
  1526  000A68  C030  F015         	movff	utoa@w,pad@p
  1527  000A6C  C031  F016         	movff	utoa@w+1,pad@p+1
  1528  000A70  ECED  F006         	call	_pad	;wreg free
  1529  000A74  C011  F01C         	movff	?_pad,?_utoa
  1530  000A78  C012  F01D         	movff	?_pad+1,?_utoa+1
  1531  000A7C  0012               	return		;funcret
  1532  000A7E                     __end_of_utoa:
  1533                           	opt callstack 0
  1534                           
  1535 ;; *************** function _pad *****************
  1536 ;; Defined at:
  1537 ;;		line 72 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1538 ;; Parameters:    Size  Location     Type
  1539 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1540 ;;		 -> sprintf@f(6), 
  1541 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1542 ;;		 -> dbuf(32), 
  1543 ;;  p               2   20[COMRAM] int 
  1544 ;; Auto vars:     Size  Location     Type
  1545 ;;  w               2   25[COMRAM] int 
  1546 ;;  i               2   23[COMRAM] int 
  1547 ;; Return value:  Size  Location     Type
  1548 ;;                  2   16[COMRAM] int 
  1549 ;; Registers used:
  1550 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1551 ;; Tracked objects:
  1552 ;;		On entry : 0/0
  1553 ;;		On exit  : 0/0
  1554 ;;		Unchanged: 0/0
  1555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1556 ;;      Params:         6       0       0       0       0       0       0
  1557 ;;      Locals:         4       0       0       0       0       0       0
  1558 ;;      Temps:          1       0       0       0       0       0       0
  1559 ;;      Totals:        11       0       0       0       0       0       0
  1560 ;;Total ram usage:       11 bytes
  1561 ;; Hardware stack levels used:    1
  1562 ;; Hardware stack levels required when called:    4
  1563 ;; This function calls:
  1564 ;;		_fputc
  1565 ;;		_fputs
  1566 ;;		_strlen
  1567 ;; This function is called by:
  1568 ;;		_utoa
  1569 ;; This function uses a non-reentrant model
  1570 ;;
  1571                           
  1572                           	psect	text6
  1573  000DDA                     __ptext6:
  1574                           	opt callstack 0
  1575  000DDA                     _pad:
  1576                           	opt callstack 22
  1577                           
  1578                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1579                           
  1580                           ;incstack = 0
  1581  000DDA  A05C               	btfss	_flags,0,c
  1582  000DDC  D00A               	goto	l1432
  1583                           
  1584                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1585  000DDE  C013  F00A         	movff	pad@buf,fputs@s
  1586  000DE2  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1587  000DE6  C011  F00C         	movff	pad@fp,fputs@fp
  1588  000DEA  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1589  000DEE  EC62  F008         	call	_fputs	;wreg free
  1590  000DF2                     l1432:
  1591                           
  1592                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1593  000DF2  BE16               	btfsc	pad@p+1,7,c
  1594  000DF4  D005               	goto	l1436
  1595  000DF6  C015  F01A         	movff	pad@p,pad@w
  1596  000DFA  C016  F01B         	movff	pad@p+1,pad@w+1
  1597  000DFE  D004               	goto	l129
  1598  000E00                     l1436:
  1599  000E00  0E00               	movlw	0
  1600  000E02  6E1B               	movwf	pad@w+1,c
  1601  000E04  0E00               	movlw	0
  1602  000E06  6E1A               	movwf	pad@w,c
  1603  000E08                     l129:
  1604                           
  1605                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1606  000E08  0E00               	movlw	0
  1607  000E0A  6E19               	movwf	pad@i+1,c
  1608  000E0C  0E00               	movlw	0
  1609  000E0E  6E18               	movwf	pad@i,c
  1610                           
  1611                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1612  000E10  D00C               	goto	l1442
  1613  000E12                     l1438:
  1614                           
  1615                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1616  000E12  0E00               	movlw	0
  1617  000E14  6E02               	movwf	fputc@c+1,c
  1618  000E16  0E20               	movlw	32
  1619  000E18  6E01               	movwf	fputc@c,c
  1620  000E1A  C011  F003         	movff	pad@fp,fputc@fp
  1621  000E1E  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1622  000E22  EC9D  F006         	call	_fputc	;wreg free
  1623                           
  1624                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1625  000E26  4A18               	infsnz	pad@i,f,c
  1626  000E28  2A19               	incf	pad@i+1,f,c
  1627  000E2A                     l1442:
  1628                           
  1629                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1630  000E2A  501A               	movf	pad@w,w,c
  1631  000E2C  5C18               	subwf	pad@i,w,c
  1632  000E2E  5019               	movf	pad@i+1,w,c
  1633  000E30  0A80               	xorlw	128
  1634  000E32  6E17               	movwf	??_pad& (0+255),c
  1635  000E34  501B               	movf	pad@w+1,w,c
  1636  000E36  0A80               	xorlw	128
  1637  000E38  5817               	subwfb	??_pad& (0+255),w,c
  1638  000E3A  A0D8               	btfss	status,0,c
  1639  000E3C  D7EA               	goto	l1438
  1640                           
  1641                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1642  000E3E  B05C               	btfsc	_flags,0,c
  1643  000E40  D00A               	goto	l1446
  1644                           
  1645                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1646  000E42  C013  F00A         	movff	pad@buf,fputs@s
  1647  000E46  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1648  000E4A  C011  F00C         	movff	pad@fp,fputs@fp
  1649  000E4E  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1650  000E52  EC62  F008         	call	_fputs	;wreg free
  1651  000E56                     l1446:
  1652                           
  1653                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1654  000E56  C013  F001         	movff	pad@buf,strlen@s
  1655  000E5A  C014  F002         	movff	pad@buf+1,strlen@s+1
  1656  000E5E  EC96  F008         	call	_strlen	;wreg free
  1657  000E62  501A               	movf	pad@w,w,c
  1658  000E64  2401               	addwf	?_strlen,w,c
  1659  000E66  6E11               	movwf	?_pad,c
  1660  000E68  501B               	movf	pad@w+1,w,c
  1661  000E6A  2002               	addwfc	?_strlen+1,w,c
  1662  000E6C  6E12               	movwf	?_pad+1,c
  1663  000E6E  0012               	return		;funcret
  1664  000E70                     __end_of_pad:
  1665                           	opt callstack 0
  1666                           
  1667 ;; *************** function _strlen *****************
  1668 ;; Defined at:
  1669 ;;		line 12 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  1670 ;; Parameters:    Size  Location     Type
  1671 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1672 ;;		 -> dbuf(32), 
  1673 ;; Auto vars:     Size  Location     Type
  1674 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1675 ;;		 -> dbuf(32), 
  1676 ;; Return value:  Size  Location     Type
  1677 ;;                  2    0[COMRAM] unsigned int 
  1678 ;; Registers used:
  1679 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1680 ;; Tracked objects:
  1681 ;;		On entry : 0/0
  1682 ;;		On exit  : 0/0
  1683 ;;		Unchanged: 0/0
  1684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1685 ;;      Params:         2       0       0       0       0       0       0
  1686 ;;      Locals:         2       0       0       0       0       0       0
  1687 ;;      Temps:          0       0       0       0       0       0       0
  1688 ;;      Totals:         4       0       0       0       0       0       0
  1689 ;;Total ram usage:        4 bytes
  1690 ;; Hardware stack levels used:    1
  1691 ;; Hardware stack levels required when called:    1
  1692 ;; This function calls:
  1693 ;;		Nothing
  1694 ;; This function is called by:
  1695 ;;		_pad
  1696 ;; This function uses a non-reentrant model
  1697 ;;
  1698                           
  1699                           	psect	text7
  1700  00112C                     __ptext7:
  1701                           	opt callstack 0
  1702  00112C                     _strlen:
  1703                           	opt callstack 24
  1704                           
  1705                           ;incstack = 0
  1706  00112C  C001  F003         	movff	strlen@s,strlen@a
  1707  001130  C002  F004         	movff	strlen@s+1,strlen@a+1
  1708  001134  D002               	goto	l1422
  1709  001136                     l1420:
  1710  001136  4A01               	infsnz	strlen@s,f,c
  1711  001138  2A02               	incf	strlen@s+1,f,c
  1712  00113A                     l1422:
  1713  00113A  C001  FFD9         	movff	strlen@s,fsr2l
  1714  00113E  C002  FFDA         	movff	strlen@s+1,fsr2h
  1715  001142  50DF               	movf	indf2,w,c
  1716  001144  A4D8               	btfss	status,2,c
  1717  001146  D7F7               	goto	l1420
  1718  001148  5003               	movf	strlen@a,w,c
  1719  00114A  5C01               	subwf	strlen@s,w,c
  1720  00114C  6E01               	movwf	?_strlen,c
  1721  00114E  5004               	movf	strlen@a+1,w,c
  1722  001150  5802               	subwfb	strlen@s+1,w,c
  1723  001152  6E02               	movwf	?_strlen+1,c
  1724  001154  0012               	return		;funcret
  1725  001156                     __end_of_strlen:
  1726                           	opt callstack 0
  1727                           
  1728 ;; *************** function _fputs *****************
  1729 ;; Defined at:
  1730 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  1731 ;; Parameters:    Size  Location     Type
  1732 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1733 ;;		 -> dbuf(32), 
  1734 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1735 ;;		 -> sprintf@f(6), 
  1736 ;; Auto vars:     Size  Location     Type
  1737 ;;  i               2   14[COMRAM] int 
  1738 ;;  c               1   13[COMRAM] unsigned char 
  1739 ;; Return value:  Size  Location     Type
  1740 ;;                  2    9[COMRAM] int 
  1741 ;; Registers used:
  1742 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1743 ;; Tracked objects:
  1744 ;;		On entry : 0/0
  1745 ;;		On exit  : 0/0
  1746 ;;		Unchanged: 0/0
  1747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1748 ;;      Params:         4       0       0       0       0       0       0
  1749 ;;      Locals:         3       0       0       0       0       0       0
  1750 ;;      Temps:          0       0       0       0       0       0       0
  1751 ;;      Totals:         7       0       0       0       0       0       0
  1752 ;;Total ram usage:        7 bytes
  1753 ;; Hardware stack levels used:    1
  1754 ;; Hardware stack levels required when called:    3
  1755 ;; This function calls:
  1756 ;;		_fputc
  1757 ;; This function is called by:
  1758 ;;		_pad
  1759 ;; This function uses a non-reentrant model
  1760 ;;
  1761                           
  1762                           	psect	text8
  1763  0010C4                     __ptext8:
  1764                           	opt callstack 0
  1765  0010C4                     _fputs:
  1766                           	opt callstack 22
  1767                           
  1768                           ;incstack = 0
  1769  0010C4  0E00               	movlw	0
  1770  0010C6  6E10               	movwf	fputs@i+1,c
  1771  0010C8  0E00               	movlw	0
  1772  0010CA  6E0F               	movwf	fputs@i,c
  1773  0010CC  D00B               	goto	l1416
  1774  0010CE                     l1412:
  1775  0010CE  C00E  F001         	movff	fputs@c,fputc@c
  1776  0010D2  6A02               	clrf	fputc@c+1,c
  1777  0010D4  C00C  F003         	movff	fputs@fp,fputc@fp
  1778  0010D8  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1779  0010DC  EC9D  F006         	call	_fputc	;wreg free
  1780  0010E0  4A0F               	infsnz	fputs@i,f,c
  1781  0010E2  2A10               	incf	fputs@i+1,f,c
  1782  0010E4                     l1416:
  1783  0010E4  500F               	movf	fputs@i,w,c
  1784  0010E6  240A               	addwf	fputs@s,w,c
  1785  0010E8  6ED9               	movwf	fsr2l,c
  1786  0010EA  5010               	movf	fputs@i+1,w,c
  1787  0010EC  200B               	addwfc	fputs@s+1,w,c
  1788  0010EE  6EDA               	movwf	fsr2h,c
  1789  0010F0  50DF               	movf	indf2,w,c
  1790  0010F2  6E0E               	movwf	fputs@c,c
  1791  0010F4  500E               	movf	fputs@c,w,c
  1792  0010F6  B4D8               	btfsc	status,2,c
  1793  0010F8  0012               	return	
  1794  0010FA  D7E9               	goto	l1412
  1795  0010FC                     __end_of_fputs:
  1796                           	opt callstack 0
  1797                           
  1798 ;; *************** function _fputc *****************
  1799 ;; Defined at:
  1800 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  1801 ;; Parameters:    Size  Location     Type
  1802 ;;  c               2    0[COMRAM] int 
  1803 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1804 ;;		 -> sprintf@f(6), 
  1805 ;; Auto vars:     Size  Location     Type
  1806 ;;		None
  1807 ;; Return value:  Size  Location     Type
  1808 ;;                  2    0[COMRAM] int 
  1809 ;; Registers used:
  1810 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1811 ;; Tracked objects:
  1812 ;;		On entry : 0/0
  1813 ;;		On exit  : 0/0
  1814 ;;		Unchanged: 0/0
  1815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1816 ;;      Params:         4       0       0       0       0       0       0
  1817 ;;      Locals:         0       0       0       0       0       0       0
  1818 ;;      Temps:          5       0       0       0       0       0       0
  1819 ;;      Totals:         9       0       0       0       0       0       0
  1820 ;;Total ram usage:        9 bytes
  1821 ;; Hardware stack levels used:    1
  1822 ;; Hardware stack levels required when called:    2
  1823 ;; This function calls:
  1824 ;;		_putch
  1825 ;; This function is called by:
  1826 ;;		_pad
  1827 ;;		_vfpfcnvrt
  1828 ;;		_fputs
  1829 ;; This function uses a non-reentrant model
  1830 ;;
  1831                           
  1832                           	psect	text9
  1833  000D3A                     __ptext9:
  1834                           	opt callstack 0
  1835  000D3A                     _fputc:
  1836                           	opt callstack 22
  1837                           
  1838                           ;incstack = 0
  1839  000D3A  5003               	movf	fputc@fp,w,c
  1840  000D3C  1004               	iorwf	fputc@fp+1,w,c
  1841  000D3E  B4D8               	btfsc	status,2,c
  1842  000D40  D004               	goto	u510
  1843  000D42  5003               	movf	fputc@fp,w,c
  1844  000D44  1004               	iorwf	fputc@fp+1,w,c
  1845  000D46  A4D8               	btfss	status,2,c
  1846  000D48  D004               	goto	l1402
  1847  000D4A                     u510:
  1848  000D4A  5001               	movf	fputc@c,w,c
  1849  000D4C  EC0E  F009         	call	_putch
  1850  000D50  0012               	return	
  1851  000D52                     l1402:
  1852  000D52  EE20 F004          	lfsr	2,4
  1853  000D56  5003               	movf	fputc@fp,w,c
  1854  000D58  26D9               	addwf	fsr2l,f,c
  1855  000D5A  5004               	movf	fputc@fp+1,w,c
  1856  000D5C  22DA               	addwfc	fsr2h,f,c
  1857  000D5E  50DE               	movf	postinc2,w,c
  1858  000D60  10DE               	iorwf	postinc2,w,c
  1859  000D62  B4D8               	btfsc	status,2,c
  1860  000D64  D016               	goto	u530
  1861  000D66  EE20 F004          	lfsr	2,4
  1862  000D6A  5003               	movf	fputc@fp,w,c
  1863  000D6C  26D9               	addwf	fsr2l,f,c
  1864  000D6E  5004               	movf	fputc@fp+1,w,c
  1865  000D70  22DA               	addwfc	fsr2h,f,c
  1866  000D72  EE10 F002          	lfsr	1,2
  1867  000D76  5003               	movf	fputc@fp,w,c
  1868  000D78  26E1               	addwf	fsr1l,f,c
  1869  000D7A  5004               	movf	fputc@fp+1,w,c
  1870  000D7C  22E2               	addwfc	fsr1h,f,c
  1871  000D7E  50DE               	movf	postinc2,w,c
  1872  000D80  5CE6               	subwf	postinc1,w,c
  1873  000D82  50E6               	movf	postinc1,w,c
  1874  000D84  0A80               	xorlw	128
  1875  000D86  6E09               	movwf	(??_fputc+4)& (0+255),c
  1876  000D88  50DE               	movf	postinc2,w,c
  1877  000D8A  0A80               	xorlw	128
  1878  000D8C  5809               	subwfb	(??_fputc+4)& (0+255),w,c
  1879  000D8E  B0D8               	btfsc	status,0,c
  1880  000D90  0012               	return	
  1881  000D92                     u530:
  1882  000D92  EE20 F002          	lfsr	2,2
  1883  000D96  5003               	movf	fputc@fp,w,c
  1884  000D98  26D9               	addwf	fsr2l,f,c
  1885  000D9A  5004               	movf	fputc@fp+1,w,c
  1886  000D9C  22DA               	addwfc	fsr2h,f,c
  1887  000D9E  CFDE F005          	movff	postinc2,??_fputc
  1888  000DA2  CFDD F006          	movff	postdec2,??_fputc+1
  1889  000DA6  C003  FFD9         	movff	fputc@fp,fsr2l
  1890  000DAA  C004  FFDA         	movff	fputc@fp+1,fsr2h
  1891  000DAE  CFDE F007          	movff	postinc2,??_fputc+2
  1892  000DB2  CFDD F008          	movff	postdec2,??_fputc+3
  1893  000DB6  5005               	movf	??_fputc,w,c
  1894  000DB8  2407               	addwf	??_fputc+2,w,c
  1895  000DBA  6ED9               	movwf	fsr2l,c
  1896  000DBC  5006               	movf	??_fputc+1,w,c
  1897  000DBE  2008               	addwfc	??_fputc+3,w,c
  1898  000DC0  6EDA               	movwf	fsr2h,c
  1899  000DC2  C001  FFDF         	movff	fputc@c,indf2
  1900  000DC6  EE20 F002          	lfsr	2,2
  1901  000DCA  5003               	movf	fputc@fp,w,c
  1902  000DCC  26D9               	addwf	fsr2l,f,c
  1903  000DCE  5004               	movf	fputc@fp+1,w,c
  1904  000DD0  22DA               	addwfc	fsr2h,f,c
  1905  000DD2  2ADE               	incf	postinc2,f,c
  1906  000DD4  0E00               	movlw	0
  1907  000DD6  22DD               	addwfc	postdec2,f,c
  1908  000DD8  0012               	return		;funcret
  1909  000DDA                     __end_of_fputc:
  1910                           	opt callstack 0
  1911                           
  1912 ;; *************** function _putch *****************
  1913 ;; Defined at:
  1914 ;;		line 7 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  1915 ;; Parameters:    Size  Location     Type
  1916 ;;  c               1    wreg     unsigned char 
  1917 ;; Auto vars:     Size  Location     Type
  1918 ;;  c               1    0[COMRAM] unsigned char 
  1919 ;; Return value:  Size  Location     Type
  1920 ;;                  1    wreg      void 
  1921 ;; Registers used:
  1922 ;;		wreg
  1923 ;; Tracked objects:
  1924 ;;		On entry : 0/0
  1925 ;;		On exit  : 0/0
  1926 ;;		Unchanged: 0/0
  1927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1928 ;;      Params:         0       0       0       0       0       0       0
  1929 ;;      Locals:         0       0       0       0       0       0       0
  1930 ;;      Temps:          0       0       0       0       0       0       0
  1931 ;;      Totals:         0       0       0       0       0       0       0
  1932 ;;Total ram usage:        0 bytes
  1933 ;; Hardware stack levels used:    1
  1934 ;; Hardware stack levels required when called:    1
  1935 ;; This function calls:
  1936 ;;		Nothing
  1937 ;; This function is called by:
  1938 ;;		_fputc
  1939 ;; This function uses a non-reentrant model
  1940 ;;
  1941                           
  1942                           	psect	text10
  1943  00121C                     __ptext10:
  1944                           	opt callstack 0
  1945  00121C                     _putch:
  1946                           	opt callstack 22
  1947                           
  1948                           ;incstack = 0
  1949  00121C  0012               	return		;funcret
  1950  00121E                     __end_of_putch:
  1951                           	opt callstack 0
  1952                           
  1953 ;; *************** function ___lomod *****************
  1954 ;; Defined at:
  1955 ;;		line 9 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lomod.c"
  1956 ;; Parameters:    Size  Location     Type
  1957 ;;  dividend        8    0[COMRAM] unsigned long long 
  1958 ;;  divisor         8    8[COMRAM] unsigned long long 
  1959 ;; Auto vars:     Size  Location     Type
  1960 ;;  counter         1   16[COMRAM] unsigned char 
  1961 ;; Return value:  Size  Location     Type
  1962 ;;                  8    0[COMRAM] unsigned long long 
  1963 ;; Registers used:
  1964 ;;		wreg, status,2, status,0
  1965 ;; Tracked objects:
  1966 ;;		On entry : 0/0
  1967 ;;		On exit  : 0/0
  1968 ;;		Unchanged: 0/0
  1969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1970 ;;      Params:        16       0       0       0       0       0       0
  1971 ;;      Locals:         1       0       0       0       0       0       0
  1972 ;;      Temps:          0       0       0       0       0       0       0
  1973 ;;      Totals:        17       0       0       0       0       0       0
  1974 ;;Total ram usage:       17 bytes
  1975 ;; Hardware stack levels used:    1
  1976 ;; Hardware stack levels required when called:    1
  1977 ;; This function calls:
  1978 ;;		Nothing
  1979 ;; This function is called by:
  1980 ;;		_utoa
  1981 ;; This function uses a non-reentrant model
  1982 ;;
  1983                           
  1984                           	psect	text11
  1985  000C8C                     __ptext11:
  1986                           	opt callstack 0
  1987  000C8C                     ___lomod:
  1988                           	opt callstack 25
  1989                           
  1990                           ;incstack = 0
  1991  000C8C  5009               	movf	___lomod@divisor,w,c
  1992  000C8E  100A               	iorwf	___lomod@divisor+1,w,c
  1993  000C90  100B               	iorwf	___lomod@divisor+2,w,c
  1994  000C92  100C               	iorwf	___lomod@divisor+3,w,c
  1995  000C94  100D               	iorwf	___lomod@divisor+4,w,c
  1996  000C96  100E               	iorwf	___lomod@divisor+5,w,c
  1997  000C98  100F               	iorwf	___lomod@divisor+6,w,c
  1998  000C9A  1010               	iorwf	___lomod@divisor+7,w,c
  1999  000C9C  B4D8               	btfsc	status,2,c
  2000  000C9E  D03C               	goto	l634
  2001  000CA0  0E01               	movlw	1
  2002  000CA2  6E11               	movwf	___lomod@counter,c
  2003  000CA4  D00A               	goto	l1488
  2004  000CA6                     l1486:
  2005  000CA6  90D8               	bcf	status,0,c
  2006  000CA8  3609               	rlcf	___lomod@divisor,f,c
  2007  000CAA  360A               	rlcf	___lomod@divisor+1,f,c
  2008  000CAC  360B               	rlcf	___lomod@divisor+2,f,c
  2009  000CAE  360C               	rlcf	___lomod@divisor+3,f,c
  2010  000CB0  360D               	rlcf	___lomod@divisor+4,f,c
  2011  000CB2  360E               	rlcf	___lomod@divisor+5,f,c
  2012  000CB4  360F               	rlcf	___lomod@divisor+6,f,c
  2013  000CB6  3610               	rlcf	___lomod@divisor+7,f,c
  2014  000CB8  2A11               	incf	___lomod@counter,f,c
  2015  000CBA                     l1488:
  2016  000CBA  AE10               	btfss	___lomod@divisor+7,7,c
  2017  000CBC  D7F4               	goto	l1486
  2018  000CBE                     u670:
  2019  000CBE  5009               	movf	___lomod@divisor,w,c
  2020  000CC0  5C01               	subwf	___lomod@dividend,w,c
  2021  000CC2  500A               	movf	___lomod@divisor+1,w,c
  2022  000CC4  5802               	subwfb	___lomod@dividend+1,w,c
  2023  000CC6  500B               	movf	___lomod@divisor+2,w,c
  2024  000CC8  5803               	subwfb	___lomod@dividend+2,w,c
  2025  000CCA  500C               	movf	___lomod@divisor+3,w,c
  2026  000CCC  5804               	subwfb	___lomod@dividend+3,w,c
  2027  000CCE  500D               	movf	___lomod@divisor+4,w,c
  2028  000CD0  5805               	subwfb	___lomod@dividend+4,w,c
  2029  000CD2  500E               	movf	___lomod@divisor+5,w,c
  2030  000CD4  5806               	subwfb	___lomod@dividend+5,w,c
  2031  000CD6  500F               	movf	___lomod@divisor+6,w,c
  2032  000CD8  5807               	subwfb	___lomod@dividend+6,w,c
  2033  000CDA  5010               	movf	___lomod@divisor+7,w,c
  2034  000CDC  5808               	subwfb	___lomod@dividend+7,w,c
  2035  000CDE  A0D8               	btfss	status,0,c
  2036  000CE0  D010               	goto	l1494
  2037  000CE2  5009               	movf	___lomod@divisor,w,c
  2038  000CE4  5E01               	subwf	___lomod@dividend,f,c
  2039  000CE6  500A               	movf	___lomod@divisor+1,w,c
  2040  000CE8  5A02               	subwfb	___lomod@dividend+1,f,c
  2041  000CEA  500B               	movf	___lomod@divisor+2,w,c
  2042  000CEC  5A03               	subwfb	___lomod@dividend+2,f,c
  2043  000CEE  500C               	movf	___lomod@divisor+3,w,c
  2044  000CF0  5A04               	subwfb	___lomod@dividend+3,f,c
  2045  000CF2  500D               	movf	___lomod@divisor+4,w,c
  2046  000CF4  5A05               	subwfb	___lomod@dividend+4,f,c
  2047  000CF6  500E               	movf	___lomod@divisor+5,w,c
  2048  000CF8  5A06               	subwfb	___lomod@dividend+5,f,c
  2049  000CFA  500F               	movf	___lomod@divisor+6,w,c
  2050  000CFC  5A07               	subwfb	___lomod@dividend+6,f,c
  2051  000CFE  5010               	movf	___lomod@divisor+7,w,c
  2052  000D00  5A08               	subwfb	___lomod@dividend+7,f,c
  2053  000D02                     l1494:
  2054  000D02  90D8               	bcf	status,0,c
  2055  000D04  3210               	rrcf	___lomod@divisor+7,f,c
  2056  000D06  320F               	rrcf	___lomod@divisor+6,f,c
  2057  000D08  320E               	rrcf	___lomod@divisor+5,f,c
  2058  000D0A  320D               	rrcf	___lomod@divisor+4,f,c
  2059  000D0C  320C               	rrcf	___lomod@divisor+3,f,c
  2060  000D0E  320B               	rrcf	___lomod@divisor+2,f,c
  2061  000D10  320A               	rrcf	___lomod@divisor+1,f,c
  2062  000D12  3209               	rrcf	___lomod@divisor,f,c
  2063  000D14  2E11               	decfsz	___lomod@counter,f,c
  2064  000D16  D7D3               	goto	u670
  2065  000D18                     l634:
  2066  000D18  C001  F001         	movff	___lomod@dividend,?___lomod
  2067  000D1C  C002  F002         	movff	___lomod@dividend+1,?___lomod+1
  2068  000D20  C003  F003         	movff	___lomod@dividend+2,?___lomod+2
  2069  000D24  C004  F004         	movff	___lomod@dividend+3,?___lomod+3
  2070  000D28  C005  F005         	movff	___lomod@dividend+4,?___lomod+4
  2071  000D2C  C006  F006         	movff	___lomod@dividend+5,?___lomod+5
  2072  000D30  C007  F007         	movff	___lomod@dividend+6,?___lomod+6
  2073  000D34  C008  F008         	movff	___lomod@dividend+7,?___lomod+7
  2074  000D38  0012               	return		;funcret
  2075  000D3A                     __end_of___lomod:
  2076                           	opt callstack 0
  2077                           
  2078 ;; *************** function ___lodiv *****************
  2079 ;; Defined at:
  2080 ;;		line 9 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lodiv.c"
  2081 ;; Parameters:    Size  Location     Type
  2082 ;;  dividend        8    0[COMRAM] unsigned long long 
  2083 ;;  divisor         8    8[COMRAM] unsigned long long 
  2084 ;; Auto vars:     Size  Location     Type
  2085 ;;  quotient        8   16[COMRAM] unsigned long long 
  2086 ;;  counter         1   24[COMRAM] unsigned char 
  2087 ;; Return value:  Size  Location     Type
  2088 ;;                  8    0[COMRAM] unsigned long long 
  2089 ;; Registers used:
  2090 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2091 ;; Tracked objects:
  2092 ;;		On entry : 0/0
  2093 ;;		On exit  : 0/0
  2094 ;;		Unchanged: 0/0
  2095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2096 ;;      Params:        16       0       0       0       0       0       0
  2097 ;;      Locals:         9       0       0       0       0       0       0
  2098 ;;      Temps:          0       0       0       0       0       0       0
  2099 ;;      Totals:        25       0       0       0       0       0       0
  2100 ;;Total ram usage:       25 bytes
  2101 ;; Hardware stack levels used:    1
  2102 ;; Hardware stack levels required when called:    1
  2103 ;; This function calls:
  2104 ;;		Nothing
  2105 ;; This function is called by:
  2106 ;;		_utoa
  2107 ;; This function uses a non-reentrant model
  2108 ;;
  2109                           
  2110                           	psect	text12
  2111  000BBE                     __ptext12:
  2112                           	opt callstack 0
  2113  000BBE                     ___lodiv:
  2114                           	opt callstack 25
  2115                           
  2116                           ;incstack = 0
  2117  000BBE  EE20  F011         	lfsr	2,___lodiv@quotient
  2118  000BC2  0E07               	movlw	7
  2119  000BC4                     u621:
  2120  000BC4  6ADE               	clrf	postinc2,c
  2121  000BC6  06E8               	decf	wreg,f,c
  2122  000BC8  E2FD               	bc	u621
  2123  000BCA  5009               	movf	___lodiv@divisor,w,c
  2124  000BCC  100A               	iorwf	___lodiv@divisor+1,w,c
  2125  000BCE  100B               	iorwf	___lodiv@divisor+2,w,c
  2126  000BD0  100C               	iorwf	___lodiv@divisor+3,w,c
  2127  000BD2  100D               	iorwf	___lodiv@divisor+4,w,c
  2128  000BD4  100E               	iorwf	___lodiv@divisor+5,w,c
  2129  000BD6  100F               	iorwf	___lodiv@divisor+6,w,c
  2130  000BD8  1010               	iorwf	___lodiv@divisor+7,w,c
  2131  000BDA  B4D8               	btfsc	status,2,c
  2132  000BDC  D046               	goto	l624
  2133  000BDE  0E01               	movlw	1
  2134  000BE0  6E19               	movwf	___lodiv@counter,c
  2135  000BE2  D00A               	goto	l1468
  2136  000BE4                     l1466:
  2137  000BE4  90D8               	bcf	status,0,c
  2138  000BE6  3609               	rlcf	___lodiv@divisor,f,c
  2139  000BE8  360A               	rlcf	___lodiv@divisor+1,f,c
  2140  000BEA  360B               	rlcf	___lodiv@divisor+2,f,c
  2141  000BEC  360C               	rlcf	___lodiv@divisor+3,f,c
  2142  000BEE  360D               	rlcf	___lodiv@divisor+4,f,c
  2143  000BF0  360E               	rlcf	___lodiv@divisor+5,f,c
  2144  000BF2  360F               	rlcf	___lodiv@divisor+6,f,c
  2145  000BF4  3610               	rlcf	___lodiv@divisor+7,f,c
  2146  000BF6  2A19               	incf	___lodiv@counter,f,c
  2147  000BF8                     l1468:
  2148  000BF8  AE10               	btfss	___lodiv@divisor+7,7,c
  2149  000BFA  D7F4               	goto	l1466
  2150  000BFC                     u640:
  2151  000BFC  90D8               	bcf	status,0,c
  2152  000BFE  3611               	rlcf	___lodiv@quotient,f,c
  2153  000C00  3612               	rlcf	___lodiv@quotient+1,f,c
  2154  000C02  3613               	rlcf	___lodiv@quotient+2,f,c
  2155  000C04  3614               	rlcf	___lodiv@quotient+3,f,c
  2156  000C06  3615               	rlcf	___lodiv@quotient+4,f,c
  2157  000C08  3616               	rlcf	___lodiv@quotient+5,f,c
  2158  000C0A  3617               	rlcf	___lodiv@quotient+6,f,c
  2159  000C0C  3618               	rlcf	___lodiv@quotient+7,f,c
  2160  000C0E  5009               	movf	___lodiv@divisor,w,c
  2161  000C10  5C01               	subwf	___lodiv@dividend,w,c
  2162  000C12  500A               	movf	___lodiv@divisor+1,w,c
  2163  000C14  5802               	subwfb	___lodiv@dividend+1,w,c
  2164  000C16  500B               	movf	___lodiv@divisor+2,w,c
  2165  000C18  5803               	subwfb	___lodiv@dividend+2,w,c
  2166  000C1A  500C               	movf	___lodiv@divisor+3,w,c
  2167  000C1C  5804               	subwfb	___lodiv@dividend+3,w,c
  2168  000C1E  500D               	movf	___lodiv@divisor+4,w,c
  2169  000C20  5805               	subwfb	___lodiv@dividend+4,w,c
  2170  000C22  500E               	movf	___lodiv@divisor+5,w,c
  2171  000C24  5806               	subwfb	___lodiv@dividend+5,w,c
  2172  000C26  500F               	movf	___lodiv@divisor+6,w,c
  2173  000C28  5807               	subwfb	___lodiv@dividend+6,w,c
  2174  000C2A  5010               	movf	___lodiv@divisor+7,w,c
  2175  000C2C  5808               	subwfb	___lodiv@dividend+7,w,c
  2176  000C2E  A0D8               	btfss	status,0,c
  2177  000C30  D011               	goto	l1478
  2178  000C32  5009               	movf	___lodiv@divisor,w,c
  2179  000C34  5E01               	subwf	___lodiv@dividend,f,c
  2180  000C36  500A               	movf	___lodiv@divisor+1,w,c
  2181  000C38  5A02               	subwfb	___lodiv@dividend+1,f,c
  2182  000C3A  500B               	movf	___lodiv@divisor+2,w,c
  2183  000C3C  5A03               	subwfb	___lodiv@dividend+2,f,c
  2184  000C3E  500C               	movf	___lodiv@divisor+3,w,c
  2185  000C40  5A04               	subwfb	___lodiv@dividend+3,f,c
  2186  000C42  500D               	movf	___lodiv@divisor+4,w,c
  2187  000C44  5A05               	subwfb	___lodiv@dividend+4,f,c
  2188  000C46  500E               	movf	___lodiv@divisor+5,w,c
  2189  000C48  5A06               	subwfb	___lodiv@dividend+5,f,c
  2190  000C4A  500F               	movf	___lodiv@divisor+6,w,c
  2191  000C4C  5A07               	subwfb	___lodiv@dividend+6,f,c
  2192  000C4E  5010               	movf	___lodiv@divisor+7,w,c
  2193  000C50  5A08               	subwfb	___lodiv@dividend+7,f,c
  2194  000C52  8011               	bsf	___lodiv@quotient,0,c
  2195  000C54                     l1478:
  2196  000C54  90D8               	bcf	status,0,c
  2197  000C56  3210               	rrcf	___lodiv@divisor+7,f,c
  2198  000C58  320F               	rrcf	___lodiv@divisor+6,f,c
  2199  000C5A  320E               	rrcf	___lodiv@divisor+5,f,c
  2200  000C5C  320D               	rrcf	___lodiv@divisor+4,f,c
  2201  000C5E  320C               	rrcf	___lodiv@divisor+3,f,c
  2202  000C60  320B               	rrcf	___lodiv@divisor+2,f,c
  2203  000C62  320A               	rrcf	___lodiv@divisor+1,f,c
  2204  000C64  3209               	rrcf	___lodiv@divisor,f,c
  2205  000C66  2E19               	decfsz	___lodiv@counter,f,c
  2206  000C68  D7C9               	goto	u640
  2207  000C6A                     l624:
  2208  000C6A  C011  F001         	movff	___lodiv@quotient,?___lodiv
  2209  000C6E  C012  F002         	movff	___lodiv@quotient+1,?___lodiv+1
  2210  000C72  C013  F003         	movff	___lodiv@quotient+2,?___lodiv+2
  2211  000C76  C014  F004         	movff	___lodiv@quotient+3,?___lodiv+3
  2212  000C7A  C015  F005         	movff	___lodiv@quotient+4,?___lodiv+4
  2213  000C7E  C016  F006         	movff	___lodiv@quotient+5,?___lodiv+5
  2214  000C82  C017  F007         	movff	___lodiv@quotient+6,?___lodiv+6
  2215  000C86  C018  F008         	movff	___lodiv@quotient+7,?___lodiv+7
  2216  000C8A  0012               	return		;funcret
  2217  000C8C                     __end_of___lodiv:
  2218                           	opt callstack 0
  2219                           
  2220 ;; *************** function _atoi *****************
  2221 ;; Defined at:
  2222 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\atoi.c"
  2223 ;; Parameters:    Size  Location     Type
  2224 ;;  s               2    7[COMRAM] PTR const unsigned char 
  2225 ;;		 -> STR_1(14), 
  2226 ;; Auto vars:     Size  Location     Type
  2227 ;;  n               2   20[COMRAM] int 
  2228 ;;  neg             2   13[COMRAM] int 
  2229 ;; Return value:  Size  Location     Type
  2230 ;;                  2    7[COMRAM] int 
  2231 ;; Registers used:
  2232 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2233 ;; Tracked objects:
  2234 ;;		On entry : 0/0
  2235 ;;		On exit  : 0/0
  2236 ;;		Unchanged: 0/0
  2237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2238 ;;      Params:         2       0       0       0       0       0       0
  2239 ;;      Locals:         9       0       0       0       0       0       0
  2240 ;;      Temps:          4       0       0       0       0       0       0
  2241 ;;      Totals:        15       0       0       0       0       0       0
  2242 ;;Total ram usage:       15 bytes
  2243 ;; Hardware stack levels used:    1
  2244 ;; Hardware stack levels required when called:    2
  2245 ;; This function calls:
  2246 ;;		___wmul
  2247 ;;		_isdigit
  2248 ;;		_isspace
  2249 ;; This function is called by:
  2250 ;;		_vfpfcnvrt
  2251 ;; This function uses a non-reentrant model
  2252 ;;
  2253                           
  2254                           	psect	text13
  2255  000A7E                     __ptext13:
  2256                           	opt callstack 0
  2257  000A7E                     _atoi:
  2258                           	opt callstack 25
  2259                           
  2260                           ;incstack = 0
  2261  000A7E  0E00               	movlw	0
  2262  000A80  6E16               	movwf	atoi@n+1,c
  2263  000A82  0E00               	movlw	0
  2264  000A84  6E15               	movwf	atoi@n,c
  2265  000A86  0E00               	movlw	0
  2266  000A88  6E0F               	movwf	atoi@neg+1,c
  2267  000A8A  0E00               	movlw	0
  2268  000A8C  6E0E               	movwf	atoi@neg,c
  2269  000A8E  D002               	goto	l1552
  2270  000A90                     l1550:
  2271  000A90  4A08               	infsnz	atoi@s,f,c
  2272  000A92  2A09               	incf	atoi@s+1,f,c
  2273  000A94                     l1552:
  2274  000A94  0E01               	movlw	1
  2275  000A96  6E14               	movwf	_atoi$1039,c
  2276  000A98  C008  FFF6         	movff	atoi@s,tblptrl
  2277  000A9C  C009  FFF7         	movff	atoi@s+1,tblptrh
  2278  000AA0                     	if	0	;tblptru may be non-zero
  2279  000AA0                     	endif
  2280  000AA0                     	if	0	;tblptru may be non-zero
  2281  000AA0                     	endif
  2282  000AA0  0008               	tblrd		*
  2283  000AA2  50F5               	movf	tablat,w,c
  2284  000AA4  0A20               	xorlw	32
  2285  000AA6  B4D8               	btfsc	status,2,c
  2286  000AA8  D018               	goto	l1560
  2287  000AAA  0EF7               	movlw	247
  2288  000AAC  6E0A               	movwf	??_atoi& (0+255),c
  2289  000AAE  0EFF               	movlw	255
  2290  000AB0  6E0B               	movwf	(??_atoi+1)& (0+255),c
  2291  000AB2  C008  FFF6         	movff	atoi@s,tblptrl
  2292  000AB6  C009  FFF7         	movff	atoi@s+1,tblptrh
  2293  000ABA                     	if	0	;tblptru may be non-zero
  2294  000ABA                     	endif
  2295  000ABA                     	if	0	;tblptru may be non-zero
  2296  000ABA                     	endif
  2297  000ABA  0008               	tblrd		*
  2298  000ABC  50F5               	movf	tablat,w,c
  2299  000ABE  6E0C               	movwf	(??_atoi+2)& (0+255),c
  2300  000AC0  6A0D               	clrf	(??_atoi+3)& (0+255),c
  2301  000AC2  500A               	movf	??_atoi,w,c
  2302  000AC4  260C               	addwf	??_atoi+2,f,c
  2303  000AC6  500B               	movf	??_atoi+1,w,c
  2304  000AC8  220D               	addwfc	??_atoi+3,f,c
  2305  000ACA  500D               	movf	??_atoi+3,w,c
  2306  000ACC  E104               	bnz	u790
  2307  000ACE  0E05               	movlw	5
  2308  000AD0  5C0C               	subwf	??_atoi+2,w,c
  2309  000AD2  A0D8               	btfss	status,0,c
  2310  000AD4  D002               	goto	l1560
  2311  000AD6                     u790:
  2312  000AD6  0E00               	movlw	0
  2313  000AD8  6E14               	movwf	_atoi$1039,c
  2314  000ADA                     l1560:
  2315  000ADA  C014  F010         	movff	_atoi$1039,_atoi$1038
  2316  000ADE  6A11               	clrf	_atoi$1038+1,c
  2317  000AE0  5010               	movf	_atoi$1038,w,c
  2318  000AE2  1011               	iorwf	_atoi$1038+1,w,c
  2319  000AE4  B4D8               	btfsc	status,2,c
  2320  000AE6  D008               	goto	l1570
  2321  000AE8  D7D3               	goto	l1550
  2322  000AEA                     l1566:
  2323  000AEA  0E00               	movlw	0
  2324  000AEC  6E0F               	movwf	atoi@neg+1,c
  2325  000AEE  0E01               	movlw	1
  2326  000AF0  6E0E               	movwf	atoi@neg,c
  2327  000AF2                     l1568:
  2328  000AF2  4A08               	infsnz	atoi@s,f,c
  2329  000AF4  2A09               	incf	atoi@s+1,f,c
  2330  000AF6  D02E               	goto	l1576
  2331  000AF8                     l1570:
  2332  000AF8  C008  FFF6         	movff	atoi@s,tblptrl
  2333  000AFC  C009  FFF7         	movff	atoi@s+1,tblptrh
  2334  000B00                     	if	0	;tblptru may be non-zero
  2335  000B00                     	endif
  2336  000B00                     	if	0	;tblptru may be non-zero
  2337  000B00                     	endif
  2338  000B00  0008               	tblrd		*
  2339  000B02  50F5               	movf	tablat,w,c
  2340  000B04  6E0A               	movwf	??_atoi& (0+255),c
  2341  000B06  6A0B               	clrf	(??_atoi+1)& (0+255),c
  2342                           
  2343                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2344                           ; Switch size 1, requested type "simple"
  2345                           ; Number of cases is 1, Range of values is 0 to 0
  2346                           ; switch strategies available:
  2347                           ; Name         Instructions Cycles
  2348                           ; simple_byte            4     3 (average)
  2349                           ;	Chosen strategy is simple_byte
  2350  000B08  500B               	movf	??_atoi+1,w,c
  2351  000B0A  0A00               	xorlw	0	; case 0
  2352  000B0C  A4D8               	btfss	status,2,c
  2353  000B0E  D022               	goto	l1576
  2354                           
  2355                           ; Switch size 1, requested type "simple"
  2356                           ; Number of cases is 2, Range of values is 43 to 45
  2357                           ; switch strategies available:
  2358                           ; Name         Instructions Cycles
  2359                           ; simple_byte            7     4 (average)
  2360                           ;	Chosen strategy is simple_byte
  2361  000B10  500A               	movf	??_atoi,w,c
  2362  000B12  0A2B               	xorlw	43	; case 43
  2363  000B14  B4D8               	btfsc	status,2,c
  2364  000B16  D7ED               	goto	l1568
  2365  000B18  0A06               	xorlw	6	; case 45
  2366  000B1A  B4D8               	btfsc	status,2,c
  2367  000B1C  D7E6               	goto	l1566
  2368  000B1E  D01A               	goto	l1576
  2369  000B20                     l1572:
  2370  000B20  C015  F001         	movff	atoi@n,___wmul@multiplier
  2371  000B24  C016  F002         	movff	atoi@n+1,___wmul@multiplier+1
  2372  000B28  0E00               	movlw	0
  2373  000B2A  6E04               	movwf	___wmul@multiplicand+1,c
  2374  000B2C  0E0A               	movlw	10
  2375  000B2E  6E03               	movwf	___wmul@multiplicand,c
  2376  000B30  ECAB  F008         	call	___wmul	;wreg free
  2377  000B34  C008  FFF6         	movff	atoi@s,tblptrl
  2378  000B38  C009  FFF7         	movff	atoi@s+1,tblptrh
  2379  000B3C                     	if	0	;tblptru may be non-zero
  2380  000B3C                     	endif
  2381  000B3C                     	if	0	;tblptru may be non-zero
  2382  000B3C                     	endif
  2383  000B3C  0008               	tblrd		*
  2384  000B3E  50F5               	movf	tablat,w,c
  2385  000B40  5E01               	subwf	?___wmul,f,c
  2386  000B42  0E00               	movlw	0
  2387  000B44  5A02               	subwfb	?___wmul+1,f,c
  2388  000B46  0E30               	movlw	48
  2389  000B48  2401               	addwf	?___wmul,w,c
  2390  000B4A  6E15               	movwf	atoi@n,c
  2391  000B4C  0E00               	movlw	0
  2392  000B4E  2002               	addwfc	?___wmul+1,w,c
  2393  000B50  6E16               	movwf	atoi@n+1,c
  2394  000B52  D7CF               	goto	l1568
  2395  000B54                     l1576:
  2396  000B54  0ED0               	movlw	208
  2397  000B56  6E0A               	movwf	??_atoi& (0+255),c
  2398  000B58  0EFF               	movlw	255
  2399  000B5A  6E0B               	movwf	(??_atoi+1)& (0+255),c
  2400  000B5C  C008  FFF6         	movff	atoi@s,tblptrl
  2401  000B60  C009  FFF7         	movff	atoi@s+1,tblptrh
  2402  000B64                     	if	0	;tblptru may be non-zero
  2403  000B64                     	endif
  2404  000B64                     	if	0	;tblptru may be non-zero
  2405  000B64                     	endif
  2406  000B64  0008               	tblrd		*
  2407  000B66  50F5               	movf	tablat,w,c
  2408  000B68  6E0C               	movwf	(??_atoi+2)& (0+255),c
  2409  000B6A  6A0D               	clrf	(??_atoi+3)& (0+255),c
  2410  000B6C  500A               	movf	??_atoi,w,c
  2411  000B6E  260C               	addwf	??_atoi+2,f,c
  2412  000B70  500B               	movf	??_atoi+1,w,c
  2413  000B72  220D               	addwfc	??_atoi+3,f,c
  2414  000B74  500D               	movf	??_atoi+3,w,c
  2415  000B76  E106               	bnz	u810
  2416  000B78  0E0A               	movlw	10
  2417  000B7A  5C0C               	subwf	??_atoi+2,w,c
  2418  000B7C  B0D8               	btfsc	status,0,c
  2419  000B7E  D002               	goto	u810
  2420  000B80  0E01               	movlw	1
  2421  000B82  D001               	goto	u820
  2422  000B84                     u810:
  2423  000B84  0E00               	movlw	0
  2424  000B86                     u820:
  2425  000B86  6E12               	movwf	_atoi$1040,c
  2426  000B88  6A13               	clrf	_atoi$1040+1,c
  2427  000B8A  5012               	movf	_atoi$1040,w,c
  2428  000B8C  1013               	iorwf	_atoi$1040+1,w,c
  2429  000B8E  A4D8               	btfss	status,2,c
  2430  000B90  D7C7               	goto	l1572
  2431  000B92  500E               	movf	atoi@neg,w,c
  2432  000B94  100F               	iorwf	atoi@neg+1,w,c
  2433  000B96  A4D8               	btfss	status,2,c
  2434  000B98  D00D               	goto	l885
  2435  000B9A  C015  F00A         	movff	atoi@n,??_atoi
  2436  000B9E  C016  F00B         	movff	atoi@n+1,??_atoi+1
  2437  000BA2  1E0A               	comf	??_atoi,f,c
  2438  000BA4  1E0B               	comf	??_atoi+1,f,c
  2439  000BA6  4A0A               	infsnz	??_atoi,f,c
  2440  000BA8  2A0B               	incf	??_atoi+1,f,c
  2441  000BAA  C00A  F008         	movff	??_atoi,?_atoi
  2442  000BAE  C00B  F009         	movff	??_atoi+1,?_atoi+1
  2443  000BB2  0012               	return	
  2444  000BB4                     l885:
  2445  000BB4  C015  F008         	movff	atoi@n,?_atoi
  2446  000BB8  C016  F009         	movff	atoi@n+1,?_atoi+1
  2447  000BBC  0012               	return		;funcret
  2448  000BBE                     __end_of_atoi:
  2449                           	opt callstack 0
  2450                           
  2451 ;; *************** function _isspace *****************
  2452 ;; Defined at:
  2453 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isspace.c"
  2454 ;; Parameters:    Size  Location     Type
  2455 ;;  c               2    0[COMRAM] int 
  2456 ;; Auto vars:     Size  Location     Type
  2457 ;;		None
  2458 ;; Return value:  Size  Location     Type
  2459 ;;                  2    0[COMRAM] int 
  2460 ;; Registers used:
  2461 ;;		wreg, status,2, status,0
  2462 ;; Tracked objects:
  2463 ;;		On entry : 0/0
  2464 ;;		On exit  : 0/0
  2465 ;;		Unchanged: 0/0
  2466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2467 ;;      Params:         2       0       0       0       0       0       0
  2468 ;;      Locals:         1       0       0       0       0       0       0
  2469 ;;      Temps:          4       0       0       0       0       0       0
  2470 ;;      Totals:         7       0       0       0       0       0       0
  2471 ;;Total ram usage:        7 bytes
  2472 ;; Hardware stack levels used:    1
  2473 ;; Hardware stack levels required when called:    1
  2474 ;; This function calls:
  2475 ;;		Nothing
  2476 ;; This function is called by:
  2477 ;;		_atoi
  2478 ;; This function uses a non-reentrant model
  2479 ;;
  2480                           
  2481                           	psect	text14
  2482  001086                     __ptext14:
  2483                           	opt callstack 0
  2484  001086                     _isspace:
  2485                           	opt callstack 25
  2486                           
  2487                           ;incstack = 0
  2488  001086  0E01               	movlw	1
  2489  001088  6E07               	movwf	_isspace$1056,c
  2490  00108A  0E20               	movlw	32
  2491  00108C  1801               	xorwf	isspace@c,w,c
  2492  00108E  1002               	iorwf	isspace@c+1,w,c
  2493  001090  B4D8               	btfsc	status,2,c
  2494  001092  D014               	goto	l1506
  2495  001094  0EF7               	movlw	247
  2496  001096  6E03               	movwf	??_isspace& (0+255),c
  2497  001098  0EFF               	movlw	255
  2498  00109A  6E04               	movwf	(??_isspace+1)& (0+255),c
  2499  00109C  C001  F005         	movff	isspace@c,??_isspace+2
  2500  0010A0  C002  F006         	movff	isspace@c+1,??_isspace+3
  2501  0010A4  5003               	movf	??_isspace,w,c
  2502  0010A6  2605               	addwf	??_isspace+2,f,c
  2503  0010A8  5004               	movf	??_isspace+1,w,c
  2504  0010AA  2206               	addwfc	??_isspace+3,f,c
  2505  0010AC  5006               	movf	??_isspace+3,w,c
  2506  0010AE  E104               	bnz	u700
  2507  0010B0  0E05               	movlw	5
  2508  0010B2  5C05               	subwf	??_isspace+2,w,c
  2509  0010B4  A0D8               	btfss	status,0,c
  2510  0010B6  D002               	goto	l1506
  2511  0010B8                     u700:
  2512  0010B8  0E00               	movlw	0
  2513  0010BA  6E07               	movwf	_isspace$1056,c
  2514  0010BC                     l1506:
  2515  0010BC  C007  F001         	movff	_isspace$1056,?_isspace
  2516  0010C0  6A02               	clrf	?_isspace+1,c
  2517  0010C2  0012               	return		;funcret
  2518  0010C4                     __end_of_isspace:
  2519                           	opt callstack 0
  2520                           
  2521 ;; *************** function _isdigit *****************
  2522 ;; Defined at:
  2523 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isdigit.c"
  2524 ;; Parameters:    Size  Location     Type
  2525 ;;  c               2    0[COMRAM] int 
  2526 ;; Auto vars:     Size  Location     Type
  2527 ;;		None
  2528 ;; Return value:  Size  Location     Type
  2529 ;;                  2    0[COMRAM] int 
  2530 ;; Registers used:
  2531 ;;		wreg, status,2, status,0
  2532 ;; Tracked objects:
  2533 ;;		On entry : 0/0
  2534 ;;		On exit  : 0/0
  2535 ;;		Unchanged: 0/0
  2536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2537 ;;      Params:         2       0       0       0       0       0       0
  2538 ;;      Locals:         0       0       0       0       0       0       0
  2539 ;;      Temps:          4       0       0       0       0       0       0
  2540 ;;      Totals:         6       0       0       0       0       0       0
  2541 ;;Total ram usage:        6 bytes
  2542 ;; Hardware stack levels used:    1
  2543 ;; Hardware stack levels required when called:    1
  2544 ;; This function calls:
  2545 ;;		Nothing
  2546 ;; This function is called by:
  2547 ;;		_vfpfcnvrt
  2548 ;;		_atoi
  2549 ;; This function uses a non-reentrant model
  2550 ;;
  2551                           
  2552                           	psect	text15
  2553  0010FC                     __ptext15:
  2554                           	opt callstack 0
  2555  0010FC                     _isdigit:
  2556                           	opt callstack 26
  2557                           
  2558                           ;incstack = 0
  2559  0010FC  0ED0               	movlw	208
  2560  0010FE  6E03               	movwf	??_isdigit& (0+255),c
  2561  001100  0EFF               	movlw	255
  2562  001102  6E04               	movwf	(??_isdigit+1)& (0+255),c
  2563  001104  C001  F005         	movff	isdigit@c,??_isdigit+2
  2564  001108  C002  F006         	movff	isdigit@c+1,??_isdigit+3
  2565  00110C  5003               	movf	??_isdigit,w,c
  2566  00110E  2605               	addwf	??_isdigit+2,f,c
  2567  001110  5004               	movf	??_isdigit+1,w,c
  2568  001112  2206               	addwfc	??_isdigit+3,f,c
  2569  001114  5006               	movf	??_isdigit+3,w,c
  2570  001116  E106               	bnz	u600
  2571  001118  0E0A               	movlw	10
  2572  00111A  5C05               	subwf	??_isdigit+2,w,c
  2573  00111C  B0D8               	btfsc	status,0,c
  2574  00111E  D002               	goto	u600
  2575  001120  0E01               	movlw	1
  2576  001122  D001               	goto	u610
  2577  001124                     u600:
  2578  001124  0E00               	movlw	0
  2579  001126                     u610:
  2580  001126  6E01               	movwf	?_isdigit,c
  2581  001128  6A02               	clrf	?_isdigit+1,c
  2582  00112A  0012               	return		;funcret
  2583  00112C                     __end_of_isdigit:
  2584                           	opt callstack 0
  2585                           
  2586 ;; *************** function ___wmul *****************
  2587 ;; Defined at:
  2588 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  2589 ;; Parameters:    Size  Location     Type
  2590 ;;  multiplier      2    0[COMRAM] unsigned int 
  2591 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2592 ;; Auto vars:     Size  Location     Type
  2593 ;;  product         2    4[COMRAM] unsigned int 
  2594 ;; Return value:  Size  Location     Type
  2595 ;;                  2    0[COMRAM] unsigned int 
  2596 ;; Registers used:
  2597 ;;		wreg, status,2, status,0, prodl, prodh
  2598 ;; Tracked objects:
  2599 ;;		On entry : 0/0
  2600 ;;		On exit  : 0/0
  2601 ;;		Unchanged: 0/0
  2602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2603 ;;      Params:         4       0       0       0       0       0       0
  2604 ;;      Locals:         2       0       0       0       0       0       0
  2605 ;;      Temps:          0       0       0       0       0       0       0
  2606 ;;      Totals:         6       0       0       0       0       0       0
  2607 ;;Total ram usage:        6 bytes
  2608 ;; Hardware stack levels used:    1
  2609 ;; Hardware stack levels required when called:    1
  2610 ;; This function calls:
  2611 ;;		Nothing
  2612 ;; This function is called by:
  2613 ;;		_atoi
  2614 ;; This function uses a non-reentrant model
  2615 ;;
  2616                           
  2617                           	psect	text16
  2618  001156                     __ptext16:
  2619                           	opt callstack 0
  2620  001156                     ___wmul:
  2621                           	opt callstack 25
  2622                           
  2623                           ;incstack = 0
  2624  001156  5001               	movf	___wmul@multiplier,w,c
  2625  001158  0203               	mulwf	___wmul@multiplicand,c
  2626  00115A  CFF3 F005          	movff	prodl,___wmul@product
  2627  00115E  CFF4 F006          	movff	prodh,___wmul@product+1
  2628  001162  5001               	movf	___wmul@multiplier,w,c
  2629  001164  0204               	mulwf	___wmul@multiplicand+1,c
  2630  001166  50F3               	movf	prodl,w,c
  2631  001168  2606               	addwf	___wmul@product+1,f,c
  2632  00116A  5002               	movf	___wmul@multiplier+1,w,c
  2633  00116C  0203               	mulwf	___wmul@multiplicand,c
  2634  00116E  50F3               	movf	prodl,w,c
  2635  001170  2606               	addwf	___wmul@product+1,f,c
  2636  001172  C005  F001         	movff	___wmul@product,?___wmul
  2637  001176  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2638  00117A  0012               	return		;funcret
  2639  00117C                     __end_of___wmul:
  2640                           	opt callstack 0
  2641                           
  2642 ;; *************** function _initADC *****************
  2643 ;; Defined at:
  2644 ;;		line 48 in file "main.c"
  2645 ;; Parameters:    Size  Location     Type
  2646 ;;		None
  2647 ;; Auto vars:     Size  Location     Type
  2648 ;;		None
  2649 ;; Return value:  Size  Location     Type
  2650 ;;                  1    wreg      void 
  2651 ;; Registers used:
  2652 ;;		wreg, status,2
  2653 ;; Tracked objects:
  2654 ;;		On entry : 0/0
  2655 ;;		On exit  : 0/0
  2656 ;;		Unchanged: 0/0
  2657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2658 ;;      Params:         0       0       0       0       0       0       0
  2659 ;;      Locals:         0       0       0       0       0       0       0
  2660 ;;      Temps:          0       0       0       0       0       0       0
  2661 ;;      Totals:         0       0       0       0       0       0       0
  2662 ;;Total ram usage:        0 bytes
  2663 ;; Hardware stack levels used:    1
  2664 ;; Hardware stack levels required when called:    1
  2665 ;; This function calls:
  2666 ;;		Nothing
  2667 ;; This function is called by:
  2668 ;;		_main
  2669 ;; This function uses a non-reentrant model
  2670 ;;
  2671                           
  2672                           	psect	text17
  2673  0011A0                     __ptext17:
  2674                           	opt callstack 0
  2675  0011A0                     _initADC:
  2676                           	opt callstack 29
  2677                           
  2678                           ;main.c: 50:     TRISAbits.RA0 = 1;
  2679                           
  2680                           ;incstack = 0
  2681  0011A0  8092               	bsf	3986,0,c	;volatile
  2682                           
  2683                           ;main.c: 51:     ANSELbits.ANS0 = 1;
  2684  0011A2  807E               	bsf	3966,0,c	;volatile
  2685                           
  2686                           ;main.c: 53:     ADCON2bits.ADFM = 1;
  2687  0011A4  8EC0               	bsf	4032,7,c	;volatile
  2688                           
  2689                           ;main.c: 55:     ADCON1 = 0x00;
  2690  0011A6  0E00               	movlw	0
  2691  0011A8  6EC1               	movwf	4033,c	;volatile
  2692                           
  2693                           ;main.c: 57:     ADCON2bits.ADCS2 = 1;
  2694  0011AA  84C0               	bsf	4032,2,c	;volatile
  2695                           
  2696                           ;main.c: 58:     ADCON2bits.ADCS1 = 0;
  2697  0011AC  92C0               	bcf	4032,1,c	;volatile
  2698                           
  2699                           ;main.c: 59:     ADCON2bits.ADCS0 = 1;
  2700  0011AE  80C0               	bsf	4032,0,c	;volatile
  2701                           
  2702                           ;main.c: 61:     ADCON2bits.ACQT2 = 1;
  2703  0011B0  8AC0               	bsf	4032,5,c	;volatile
  2704                           
  2705                           ;main.c: 62:     ADCON2bits.ACQT1 = 0;
  2706  0011B2  98C0               	bcf	4032,4,c	;volatile
  2707                           
  2708                           ;main.c: 63:     ADCON2bits.ACQT0 = 0;
  2709  0011B4  96C0               	bcf	4032,3,c	;volatile
  2710                           
  2711                           ;main.c: 65:     PIR1bits.ADIF = 0;
  2712  0011B6  9C9E               	bcf	3998,6,c	;volatile
  2713                           
  2714                           ;main.c: 66:     PIE1bits.ADIE = 1;
  2715  0011B8  8C9D               	bsf	3997,6,c	;volatile
  2716                           
  2717                           ;main.c: 67:     INTCONbits.PEIE = 1;
  2718  0011BA  8CF2               	bsf	4082,6,c	;volatile
  2719                           
  2720                           ;main.c: 68:     INTCONbits.GIE = 1;
  2721  0011BC  8EF2               	bsf	4082,7,c	;volatile
  2722  0011BE  0012               	return		;funcret
  2723  0011C0                     __end_of_initADC:
  2724                           	opt callstack 0
  2725                           
  2726 ;; *************** function _CLCD_SetPos *****************
  2727 ;; Defined at:
  2728 ;;		line 102 in file "xlcd.c"
  2729 ;; Parameters:    Size  Location     Type
  2730 ;;  row             1    wreg     unsigned char 
  2731 ;;  col             1    3[COMRAM] unsigned char 
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;  row             1    4[COMRAM] unsigned char 
  2734 ;; Return value:  Size  Location     Type
  2735 ;;                  1    wreg      void 
  2736 ;; Registers used:
  2737 ;;		wreg, status,2, status,0, cstack
  2738 ;; Tracked objects:
  2739 ;;		On entry : 0/0
  2740 ;;		On exit  : 0/0
  2741 ;;		Unchanged: 0/0
  2742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2743 ;;      Params:         1       0       0       0       0       0       0
  2744 ;;      Locals:         1       0       0       0       0       0       0
  2745 ;;      Temps:          0       0       0       0       0       0       0
  2746 ;;      Totals:         2       0       0       0       0       0       0
  2747 ;;Total ram usage:        2 bytes
  2748 ;; Hardware stack levels used:    1
  2749 ;; Hardware stack levels required when called:    3
  2750 ;; This function calls:
  2751 ;;		_CLCD_SendCmd
  2752 ;; This function is called by:
  2753 ;;		_main
  2754 ;; This function uses a non-reentrant model
  2755 ;;
  2756                           
  2757                           	psect	text18
  2758  0011DE                     __ptext18:
  2759                           	opt callstack 0
  2760  0011DE                     _CLCD_SetPos:
  2761                           	opt callstack 27
  2762                           
  2763                           ;incstack = 0
  2764                           ;CLCD_SetPos@row stored from wreg
  2765  0011DE  6E05               	movwf	CLCD_SetPos@row,c
  2766                           
  2767                           ;xlcd.c: 103:     if (row) {
  2768  0011E0  5005               	movf	CLCD_SetPos@row,w,c
  2769  0011E2  B4D8               	btfsc	status,2,c
  2770  0011E4  D006               	goto	l1808
  2771                           
  2772                           ;xlcd.c: 104:         CLCD_SendCmd(0x80 | (0x40 + col));
  2773  0011E6  5004               	movf	CLCD_SetPos@col,w,c
  2774  0011E8  0F40               	addlw	64
  2775  0011EA  0980               	iorlw	128
  2776  0011EC  EC21  F008         	call	_CLCD_SendCmd
  2777                           
  2778                           ;xlcd.c: 105:     } else {
  2779  0011F0  0012               	return	
  2780  0011F2                     l1808:
  2781                           
  2782                           ;xlcd.c: 106:         CLCD_SendCmd(0x80 | (0x00 + col));
  2783  0011F2  5004               	movf	CLCD_SetPos@col,w,c
  2784  0011F4  0980               	iorlw	128
  2785  0011F6  EC21  F008         	call	_CLCD_SendCmd
  2786  0011FA  0012               	return		;funcret
  2787  0011FC                     __end_of_CLCD_SetPos:
  2788                           	opt callstack 0
  2789                           
  2790 ;; *************** function _CLCD_PutS *****************
  2791 ;; Defined at:
  2792 ;;		line 98 in file "xlcd.c"
  2793 ;; Parameters:    Size  Location     Type
  2794 ;;  str             2    4[COMRAM] PTR unsigned char 
  2795 ;;		 -> msgBuffer(16), 
  2796 ;; Auto vars:     Size  Location     Type
  2797 ;;		None
  2798 ;; Return value:  Size  Location     Type
  2799 ;;                  1    wreg      void 
  2800 ;; Registers used:
  2801 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2802 ;; Tracked objects:
  2803 ;;		On entry : 0/0
  2804 ;;		On exit  : 0/0
  2805 ;;		Unchanged: 0/0
  2806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2807 ;;      Params:         2       0       0       0       0       0       0
  2808 ;;      Locals:         0       0       0       0       0       0       0
  2809 ;;      Temps:          0       0       0       0       0       0       0
  2810 ;;      Totals:         2       0       0       0       0       0       0
  2811 ;;Total ram usage:        2 bytes
  2812 ;; Hardware stack levels used:    1
  2813 ;; Hardware stack levels required when called:    4
  2814 ;; This function calls:
  2815 ;;		_CLCD_PutC
  2816 ;; This function is called by:
  2817 ;;		_main
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821                           	psect	text19
  2822  00117C                     __ptext19:
  2823                           	opt callstack 0
  2824  00117C                     _CLCD_PutS:
  2825                           	opt callstack 26
  2826                           
  2827                           ;xlcd.c: 99:     while (*str) CLCD_PutC(*str++);
  2828                           
  2829                           ;incstack = 0
  2830  00117C  D009               	goto	l1816
  2831  00117E                     l1812:
  2832  00117E  C005  FFD9         	movff	CLCD_PutS@str,fsr2l
  2833  001182  C006  FFDA         	movff	CLCD_PutS@str+1,fsr2h
  2834  001186  50DF               	movf	indf2,w,c
  2835  001188  EC05  F009         	call	_CLCD_PutC
  2836  00118C  4A05               	infsnz	CLCD_PutS@str,f,c
  2837  00118E  2A06               	incf	CLCD_PutS@str+1,f,c
  2838  001190                     l1816:
  2839  001190  C005  FFD9         	movff	CLCD_PutS@str,fsr2l
  2840  001194  C006  FFDA         	movff	CLCD_PutS@str+1,fsr2h
  2841  001198  50DF               	movf	indf2,w,c
  2842  00119A  B4D8               	btfsc	status,2,c
  2843  00119C  0012               	return	
  2844  00119E  D7EF               	goto	l1812
  2845  0011A0                     __end_of_CLCD_PutS:
  2846                           	opt callstack 0
  2847                           
  2848 ;; *************** function _CLCD_PutC *****************
  2849 ;; Defined at:
  2850 ;;		line 94 in file "xlcd.c"
  2851 ;; Parameters:    Size  Location     Type
  2852 ;;  ch              1    wreg     unsigned char 
  2853 ;; Auto vars:     Size  Location     Type
  2854 ;;  ch              1    3[COMRAM] unsigned char 
  2855 ;; Return value:  Size  Location     Type
  2856 ;;                  1    wreg      void 
  2857 ;; Registers used:
  2858 ;;		wreg, status,2, status,0, cstack
  2859 ;; Tracked objects:
  2860 ;;		On entry : 0/0
  2861 ;;		On exit  : 0/0
  2862 ;;		Unchanged: 0/0
  2863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2864 ;;      Params:         0       0       0       0       0       0       0
  2865 ;;      Locals:         1       0       0       0       0       0       0
  2866 ;;      Temps:          0       0       0       0       0       0       0
  2867 ;;      Totals:         1       0       0       0       0       0       0
  2868 ;;Total ram usage:        1 bytes
  2869 ;; Hardware stack levels used:    1
  2870 ;; Hardware stack levels required when called:    3
  2871 ;; This function calls:
  2872 ;;		_CLCD_SendData
  2873 ;; This function is called by:
  2874 ;;		_CLCD_PutS
  2875 ;; This function uses a non-reentrant model
  2876 ;;
  2877                           
  2878                           	psect	text20
  2879  00120A                     __ptext20:
  2880                           	opt callstack 0
  2881  00120A                     _CLCD_PutC:
  2882                           	opt callstack 26
  2883                           
  2884                           ;incstack = 0
  2885                           ;CLCD_PutC@ch stored from wreg
  2886  00120A  6E04               	movwf	CLCD_PutC@ch,c
  2887                           
  2888                           ;xlcd.c: 95:     CLCD_SendData(ch);
  2889  00120C  5004               	movf	CLCD_PutC@ch,w,c
  2890  00120E  ECFF  F007         	call	_CLCD_SendData
  2891  001212  0012               	return		;funcret
  2892  001214                     __end_of_CLCD_PutC:
  2893                           	opt callstack 0
  2894                           
  2895 ;; *************** function _CLCD_SendData *****************
  2896 ;; Defined at:
  2897 ;;		line 28 in file "xlcd.c"
  2898 ;; Parameters:    Size  Location     Type
  2899 ;;  data            1    wreg     unsigned char 
  2900 ;; Auto vars:     Size  Location     Type
  2901 ;;  data            1    1[COMRAM] unsigned char 
  2902 ;;  port            1    2[COMRAM] unsigned char 
  2903 ;; Return value:  Size  Location     Type
  2904 ;;                  1    wreg      void 
  2905 ;; Registers used:
  2906 ;;		wreg, status,2, status,0, cstack
  2907 ;; Tracked objects:
  2908 ;;		On entry : 0/0
  2909 ;;		On exit  : 0/0
  2910 ;;		Unchanged: 0/0
  2911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2912 ;;      Params:         0       0       0       0       0       0       0
  2913 ;;      Locals:         2       0       0       0       0       0       0
  2914 ;;      Temps:          1       0       0       0       0       0       0
  2915 ;;      Totals:         3       0       0       0       0       0       0
  2916 ;;Total ram usage:        3 bytes
  2917 ;; Hardware stack levels used:    1
  2918 ;; Hardware stack levels required when called:    2
  2919 ;; This function calls:
  2920 ;;		_CLCD_ToggleEnable
  2921 ;; This function is called by:
  2922 ;;		_CLCD_PutC
  2923 ;; This function uses a non-reentrant model
  2924 ;;
  2925                           
  2926                           	psect	text21
  2927  000FFE                     __ptext21:
  2928                           	opt callstack 0
  2929  000FFE                     _CLCD_SendData:
  2930                           	opt callstack 26
  2931                           
  2932                           ;incstack = 0
  2933                           ;CLCD_SendData@data stored from wreg
  2934  000FFE  6E02               	movwf	CLCD_SendData@data,c
  2935                           
  2936                           ;xlcd.c: 30:     TRISD = 0x00;
  2937  001000  0E00               	movlw	0
  2938  001002  6E95               	movwf	3989,c	;volatile
  2939                           
  2940                           ;xlcd.c: 31:     LATCbits.LATC4 = 1;
  2941  001004  888B               	bsf	3979,4,c	;volatile
  2942                           
  2943                           ;xlcd.c: 37:     uint8_t port = PORTD & 0x0F;
  2944  001006  5083               	movf	3971,w,c	;volatile
  2945  001008  0B0F               	andlw	15
  2946  00100A  6E03               	movwf	CLCD_SendData@port,c
  2947                           
  2948                           ;xlcd.c: 38:     LATD = ((data & 0xF0) | port);
  2949  00100C  5002               	movf	CLCD_SendData@data,w,c
  2950  00100E  0BF0               	andlw	240
  2951  001010  1003               	iorwf	CLCD_SendData@port,w,c
  2952  001012  6E8C               	movwf	3980,c	;volatile
  2953                           
  2954                           ;xlcd.c: 39:     CLCD_ToggleEnable();
  2955  001014  ECFE  F008         	call	_CLCD_ToggleEnable	;wreg free
  2956                           
  2957                           ;xlcd.c: 40:     _delay((unsigned long)((1)*(16000000/4000000.0)));
  2958  001018  F000 F000          	nop2		;2 cycle nop
  2959  00101C  F000 F000          	nop2		;2 cycle nop
  2960                           
  2961                           ;xlcd.c: 41:     LATD = (((data<<4) & 0xF0) | port);
  2962  001020  3802               	swapf	CLCD_SendData@data,w,c
  2963  001022  0BF0               	andlw	240
  2964  001024  0BF0               	andlw	240
  2965  001026  1003               	iorwf	CLCD_SendData@port,w,c
  2966  001028  6E8C               	movwf	3980,c	;volatile
  2967                           
  2968                           ;xlcd.c: 42:     CLCD_ToggleEnable();
  2969  00102A  ECFE  F008         	call	_CLCD_ToggleEnable	;wreg free
  2970                           
  2971                           ;xlcd.c: 44:     _delay((unsigned long)((2)*(16000000/4000.0)));
  2972  00102E  0E0B               	movlw	11
  2973  001030  6E01               	movwf	??_CLCD_SendData& (0+255),c
  2974  001032  0E62               	movlw	98
  2975  001034                     u1007:
  2976  001034  2EE8               	decfsz	wreg,f,c
  2977  001036  D7FE               	bra	u1007
  2978  001038  2E01               	decfsz	??_CLCD_SendData& (0+255),f,c
  2979  00103A  D7FC               	bra	u1007
  2980  00103C  F000 F000          	nop2	
  2981  001040  0012               	return		;funcret
  2982  001042                     __end_of_CLCD_SendData:
  2983                           	opt callstack 0
  2984                           
  2985 ;; *************** function _CLCD_Initialize *****************
  2986 ;; Defined at:
  2987 ;;		line 47 in file "xlcd.c"
  2988 ;; Parameters:    Size  Location     Type
  2989 ;;		None
  2990 ;; Auto vars:     Size  Location     Type
  2991 ;;		None
  2992 ;; Return value:  Size  Location     Type
  2993 ;;                  1    wreg      void 
  2994 ;; Registers used:
  2995 ;;		wreg, status,2, status,0, cstack
  2996 ;; Tracked objects:
  2997 ;;		On entry : 0/0
  2998 ;;		On exit  : 0/0
  2999 ;;		Unchanged: 0/0
  3000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3001 ;;      Params:         0       0       0       0       0       0       0
  3002 ;;      Locals:         0       0       0       0       0       0       0
  3003 ;;      Temps:          1       0       0       0       0       0       0
  3004 ;;      Totals:         1       0       0       0       0       0       0
  3005 ;;Total ram usage:        1 bytes
  3006 ;; Hardware stack levels used:    1
  3007 ;; Hardware stack levels required when called:    3
  3008 ;; This function calls:
  3009 ;;		_CLCD_SendCmd
  3010 ;; This function is called by:
  3011 ;;		_main
  3012 ;; This function uses a non-reentrant model
  3013 ;;
  3014                           
  3015                           	psect	text22
  3016  000E70                     __ptext22:
  3017                           	opt callstack 0
  3018  000E70                     _CLCD_Initialize:
  3019                           	opt callstack 27
  3020                           
  3021                           ;xlcd.c: 68:     LATD &= 0x0F;
  3022                           
  3023                           ;incstack = 0
  3024  000E70  0E0F               	movlw	15
  3025  000E72  168C               	andwf	3980,f,c	;volatile
  3026                           
  3027                           ;xlcd.c: 69:     LATCbits.LATC4 = 0;
  3028  000E74  988B               	bcf	3979,4,c	;volatile
  3029                           
  3030                           ;xlcd.c: 70:     LATCbits.LATC6 = 0;
  3031  000E76  9C8B               	bcf	3979,6,c	;volatile
  3032                           
  3033                           ;xlcd.c: 72:     TRISD &= 0x0F;
  3034  000E78  0E0F               	movlw	15
  3035  000E7A  1695               	andwf	3989,f,c	;volatile
  3036                           
  3037                           ;xlcd.c: 73:     TRISCbits.TRISC4 = 0;
  3038  000E7C  9894               	bcf	3988,4,c	;volatile
  3039                           
  3040                           ;xlcd.c: 74:     TRISCbits.TRISC6 = 0;
  3041  000E7E  9C94               	bcf	3988,6,c	;volatile
  3042                           
  3043                           ;xlcd.c: 76:     _delay((unsigned long)((15)*(16000000/4000.0)));
  3044  000E80  0E4E               	movlw	78
  3045  000E82  6E04               	movwf	??_CLCD_Initialize& (0+255),c
  3046  000E84  0EEB               	movlw	235
  3047  000E86                     u1017:
  3048  000E86  2EE8               	decfsz	wreg,f,c
  3049  000E88  D7FE               	bra	u1017
  3050  000E8A  2E04               	decfsz	??_CLCD_Initialize& (0+255),f,c
  3051  000E8C  D7FC               	bra	u1017
  3052  000E8E  F000               	nop	
  3053                           
  3054                           ;xlcd.c: 78:     CLCD_SendCmd(0x20 | 0x00);
  3055  000E90  0E20               	movlw	32
  3056  000E92  EC21  F008         	call	_CLCD_SendCmd
  3057                           
  3058                           ;xlcd.c: 79:     _delay((unsigned long)((5)*(16000000/4000.0)));
  3059  000E96  0E1A               	movlw	26
  3060  000E98  6E04               	movwf	??_CLCD_Initialize& (0+255),c
  3061  000E9A  0EF8               	movlw	248
  3062  000E9C                     u1027:
  3063  000E9C  2EE8               	decfsz	wreg,f,c
  3064  000E9E  D7FE               	bra	u1027
  3065  000EA0  2E04               	decfsz	??_CLCD_Initialize& (0+255),f,c
  3066  000EA2  D7FC               	bra	u1027
  3067  000EA4  F000 F000          	nop2	
  3068                           
  3069                           ;xlcd.c: 80:     CLCD_SendCmd(0x20 | 0x00);
  3070  000EA8  0E20               	movlw	32
  3071  000EAA  EC21  F008         	call	_CLCD_SendCmd
  3072                           
  3073                           ;xlcd.c: 81:     _delay((unsigned long)((1)*(16000000/4000.0)));
  3074  000EAE  0E06               	movlw	6
  3075  000EB0  6E04               	movwf	??_CLCD_Initialize& (0+255),c
  3076  000EB2  0E30               	movlw	48
  3077  000EB4                     u1037:
  3078  000EB4  2EE8               	decfsz	wreg,f,c
  3079  000EB6  D7FE               	bra	u1037
  3080  000EB8  2E04               	decfsz	??_CLCD_Initialize& (0+255),f,c
  3081  000EBA  D7FC               	bra	u1037
  3082  000EBC  F000 F000          	nop2	
  3083                           
  3084                           ;xlcd.c: 82:     CLCD_SendCmd(0x20 | 0x00);
  3085  000EC0  0E20               	movlw	32
  3086  000EC2  EC21  F008         	call	_CLCD_SendCmd
  3087                           
  3088                           ;xlcd.c: 83:     _delay((unsigned long)((1)*(16000000/4000.0)));
  3089  000EC6  0E06               	movlw	6
  3090  000EC8  6E04               	movwf	??_CLCD_Initialize& (0+255),c
  3091  000ECA  0E30               	movlw	48
  3092  000ECC                     u1047:
  3093  000ECC  2EE8               	decfsz	wreg,f,c
  3094  000ECE  D7FE               	bra	u1047
  3095  000ED0  2E04               	decfsz	??_CLCD_Initialize& (0+255),f,c
  3096  000ED2  D7FC               	bra	u1047
  3097  000ED4  F000 F000          	nop2	
  3098                           
  3099                           ;xlcd.c: 85:     CLCD_SendCmd(0x20 | 0x00 | 0x08);
  3100  000ED8  0E28               	movlw	40
  3101  000EDA  EC21  F008         	call	_CLCD_SendCmd
  3102                           
  3103                           ;xlcd.c: 88:     CLCD_SendCmd(0x01);
  3104  000EDE  0E01               	movlw	1
  3105  000EE0  EC21  F008         	call	_CLCD_SendCmd
  3106                           
  3107                           ;xlcd.c: 89:     CLCD_SendCmd(0x08 | 0x04);
  3108  000EE4  0E0C               	movlw	12
  3109  000EE6  EC21  F008         	call	_CLCD_SendCmd
  3110                           
  3111                           ;xlcd.c: 90:     CLCD_SendCmd(0x04 | 0x02);
  3112  000EEA  0E06               	movlw	6
  3113  000EEC  EC21  F008         	call	_CLCD_SendCmd
  3114                           
  3115                           ;xlcd.c: 91:     CLCD_SendCmd(0x80);
  3116  000EF0  0E80               	movlw	128
  3117  000EF2  EC21  F008         	call	_CLCD_SendCmd
  3118  000EF6  0012               	return		;funcret
  3119  000EF8                     __end_of_CLCD_Initialize:
  3120                           	opt callstack 0
  3121                           
  3122 ;; *************** function _CLCD_SendCmd *****************
  3123 ;; Defined at:
  3124 ;;		line 9 in file "xlcd.c"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;  cmd             1    wreg     unsigned char 
  3127 ;; Auto vars:     Size  Location     Type
  3128 ;;  cmd             1    1[COMRAM] unsigned char 
  3129 ;;  port            1    2[COMRAM] unsigned char 
  3130 ;; Return value:  Size  Location     Type
  3131 ;;                  1    wreg      void 
  3132 ;; Registers used:
  3133 ;;		wreg, status,2, status,0, cstack
  3134 ;; Tracked objects:
  3135 ;;		On entry : 0/0
  3136 ;;		On exit  : 0/0
  3137 ;;		Unchanged: 0/0
  3138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3139 ;;      Params:         0       0       0       0       0       0       0
  3140 ;;      Locals:         2       0       0       0       0       0       0
  3141 ;;      Temps:          1       0       0       0       0       0       0
  3142 ;;      Totals:         3       0       0       0       0       0       0
  3143 ;;Total ram usage:        3 bytes
  3144 ;; Hardware stack levels used:    1
  3145 ;; Hardware stack levels required when called:    2
  3146 ;; This function calls:
  3147 ;;		_CLCD_ToggleEnable
  3148 ;; This function is called by:
  3149 ;;		_CLCD_Initialize
  3150 ;;		_CLCD_SetPos
  3151 ;; This function uses a non-reentrant model
  3152 ;;
  3153                           
  3154                           	psect	text23
  3155  001042                     __ptext23:
  3156                           	opt callstack 0
  3157  001042                     _CLCD_SendCmd:
  3158                           	opt callstack 27
  3159                           
  3160                           ;incstack = 0
  3161                           ;CLCD_SendCmd@cmd stored from wreg
  3162  001042  6E02               	movwf	CLCD_SendCmd@cmd,c
  3163                           
  3164                           ;xlcd.c: 11:     TRISD = 0x00;
  3165  001044  0E00               	movlw	0
  3166  001046  6E95               	movwf	3989,c	;volatile
  3167                           
  3168                           ;xlcd.c: 12:     LATCbits.LATC4 = 0;
  3169  001048  988B               	bcf	3979,4,c	;volatile
  3170                           
  3171                           ;xlcd.c: 18:     uint8_t port = PORTD & 0x0F;
  3172  00104A  5083               	movf	3971,w,c	;volatile
  3173  00104C  0B0F               	andlw	15
  3174  00104E  6E03               	movwf	CLCD_SendCmd@port,c
  3175                           
  3176                           ;xlcd.c: 19:     LATD = ((cmd & 0xF0) | port);
  3177  001050  5002               	movf	CLCD_SendCmd@cmd,w,c
  3178  001052  0BF0               	andlw	240
  3179  001054  1003               	iorwf	CLCD_SendCmd@port,w,c
  3180  001056  6E8C               	movwf	3980,c	;volatile
  3181                           
  3182                           ;xlcd.c: 20:     CLCD_ToggleEnable();
  3183  001058  ECFE  F008         	call	_CLCD_ToggleEnable	;wreg free
  3184                           
  3185                           ;xlcd.c: 21:     _delay((unsigned long)((1)*(16000000/4000000.0)));
  3186  00105C  F000 F000          	nop2		;2 cycle nop
  3187  001060  F000 F000          	nop2		;2 cycle nop
  3188                           
  3189                           ;xlcd.c: 22:     LATD = (((cmd<<4) & 0xF0) | port);
  3190  001064  3802               	swapf	CLCD_SendCmd@cmd,w,c
  3191  001066  0BF0               	andlw	240
  3192  001068  0BF0               	andlw	240
  3193  00106A  1003               	iorwf	CLCD_SendCmd@port,w,c
  3194  00106C  6E8C               	movwf	3980,c	;volatile
  3195                           
  3196                           ;xlcd.c: 23:     CLCD_ToggleEnable();
  3197  00106E  ECFE  F008         	call	_CLCD_ToggleEnable	;wreg free
  3198                           
  3199                           ;xlcd.c: 25:     _delay((unsigned long)((2)*(16000000/4000.0)));
  3200  001072  0E0B               	movlw	11
  3201  001074  6E01               	movwf	??_CLCD_SendCmd& (0+255),c
  3202  001076  0E62               	movlw	98
  3203  001078                     u1057:
  3204  001078  2EE8               	decfsz	wreg,f,c
  3205  00107A  D7FE               	bra	u1057
  3206  00107C  2E01               	decfsz	??_CLCD_SendCmd& (0+255),f,c
  3207  00107E  D7FC               	bra	u1057
  3208  001080  F000 F000          	nop2	
  3209  001084  0012               	return		;funcret
  3210  001086                     __end_of_CLCD_SendCmd:
  3211                           	opt callstack 0
  3212                           
  3213 ;; *************** function _CLCD_ToggleEnable *****************
  3214 ;; Defined at:
  3215 ;;		line 3 in file "xlcd.c"
  3216 ;; Parameters:    Size  Location     Type
  3217 ;;		None
  3218 ;; Auto vars:     Size  Location     Type
  3219 ;;		None
  3220 ;; Return value:  Size  Location     Type
  3221 ;;                  1    wreg      void 
  3222 ;; Registers used:
  3223 ;;		None
  3224 ;; Tracked objects:
  3225 ;;		On entry : 0/0
  3226 ;;		On exit  : 0/0
  3227 ;;		Unchanged: 0/0
  3228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3229 ;;      Params:         0       0       0       0       0       0       0
  3230 ;;      Locals:         0       0       0       0       0       0       0
  3231 ;;      Temps:          0       0       0       0       0       0       0
  3232 ;;      Totals:         0       0       0       0       0       0       0
  3233 ;;Total ram usage:        0 bytes
  3234 ;; Hardware stack levels used:    1
  3235 ;; Hardware stack levels required when called:    1
  3236 ;; This function calls:
  3237 ;;		Nothing
  3238 ;; This function is called by:
  3239 ;;		_CLCD_SendCmd
  3240 ;;		_CLCD_SendData
  3241 ;; This function uses a non-reentrant model
  3242 ;;
  3243                           
  3244                           	psect	text24
  3245  0011FC                     __ptext24:
  3246                           	opt callstack 0
  3247  0011FC                     _CLCD_ToggleEnable:
  3248                           	opt callstack 27
  3249                           
  3250                           ;xlcd.c: 4:     LATCbits.LATC6 = 1;
  3251                           
  3252                           ;incstack = 0
  3253  0011FC  8C8B               	bsf	3979,6,c	;volatile
  3254                           
  3255                           ;xlcd.c: 5:     _delay((unsigned long)((1)*(16000000/4000000.0)));
  3256  0011FE  F000 F000          	nop2		;2 cycle nop
  3257  001202  F000 F000          	nop2		;2 cycle nop
  3258                           
  3259                           ;xlcd.c: 6:     LATCbits.LATC6 = 0;
  3260  001206  9C8B               	bcf	3979,6,c	;volatile
  3261  001208  0012               	return		;funcret
  3262  00120A                     __end_of_CLCD_ToggleEnable:
  3263                           	opt callstack 0
  3264                           
  3265 ;; *************** function _ISR *****************
  3266 ;; Defined at:
  3267 ;;		line 17 in file "main.c"
  3268 ;; Parameters:    Size  Location     Type
  3269 ;;		None
  3270 ;; Auto vars:     Size  Location     Type
  3271 ;;		None
  3272 ;; Return value:  Size  Location     Type
  3273 ;;                  1    wreg      void 
  3274 ;; Registers used:
  3275 ;;		wreg, status,2, status,0
  3276 ;; Tracked objects:
  3277 ;;		On entry : 0/0
  3278 ;;		On exit  : 0/0
  3279 ;;		Unchanged: 0/0
  3280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3281 ;;      Params:         0       0       0       0       0       0       0
  3282 ;;      Locals:         0       0       0       0       0       0       0
  3283 ;;      Temps:          0       0       0       0       0       0       0
  3284 ;;      Totals:         0       0       0       0       0       0       0
  3285 ;;Total ram usage:        0 bytes
  3286 ;; Hardware stack levels used:    1
  3287 ;; This function calls:
  3288 ;;		Nothing
  3289 ;; This function is called by:
  3290 ;;		Interrupt level 2
  3291 ;; This function uses a non-reentrant model
  3292 ;;
  3293                           
  3294                           	psect	intcode
  3295  000008                     __pintcode:
  3296                           	opt callstack 0
  3297  000008                     _ISR:
  3298                           	opt callstack 22
  3299                           
  3300                           ;incstack = 0
  3301  000008  825E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3302                           
  3303                           ;main.c: 19:     if(PIR1bits.ADIF)
  3304  00000A  AC9E               	btfss	3998,6,c	;volatile
  3305  00000C  D008               	goto	i2l48
  3306                           
  3307                           ;main.c: 20:     {;main.c: 21:         adcVal = (ADRESH << 8);
  3308  00000E  50C4               	movf	4036,w,c	;volatile
  3309  000010  0100               	movlb	0	; () banked
  3310  000012  6F67               	movwf	(_adcVal+1)& (0+255),b
  3311  000014  6B66               	clrf	_adcVal& (0+255),b
  3312                           
  3313                           ; BSR set to: 0
  3314                           ;main.c: 22:         adcVal |= ADRESL;
  3315  000016  50C3               	movf	4035,w,c	;volatile
  3316  000018  1366               	iorwf	_adcVal& (0+255),f,b
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;main.c: 24:         PIR1bits.ADIF = 0;
  3320  00001A  9C9E               	bcf	3998,6,c	;volatile
  3321                           
  3322                           ; BSR set to: 0
  3323                           ;main.c: 26:         ADCON0bits.GO_DONE = 1;
  3324  00001C  82C2               	bsf	4034,1,c	;volatile
  3325  00001E                     i2l48:
  3326  00001E  925E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3327  000020  0011               	retfie		f
  3328  000022                     __end_of_ISR:
  3329                           	opt callstack 0
  3330                           
  3331                           	psect	rparam
  3332  0000                     
  3333                           	psect	temp
  3334  00005E                     btemp:
  3335                           	opt callstack 0
  3336  00005E                     	ds	1
  3337  0000                     int$flags	set	btemp
  3338  0000                     wtemp8	set	btemp+1
  3339  0000                     ttemp5	set	btemp+1
  3340  0000                     ttemp6	set	btemp+4
  3341  0000                     ttemp7	set	btemp+8
  3342                           tosu	equ	0xFFF
  3343                           tosh	equ	0xFFE
  3344                           tosl	equ	0xFFD
  3345                           stkptr	equ	0xFFC
  3346                           pclatu	equ	0xFFB
  3347                           pclath	equ	0xFFA
  3348                           pcl	equ	0xFF9
  3349                           tblptru	equ	0xFF8
  3350                           tblptrh	equ	0xFF7
  3351                           tblptrl	equ	0xFF6
  3352                           tablat	equ	0xFF5
  3353                           prodh	equ	0xFF4
  3354                           prodl	equ	0xFF3
  3355                           indf0	equ	0xFEF
  3356                           postinc0	equ	0xFEE
  3357                           postdec0	equ	0xFED
  3358                           preinc0	equ	0xFEC
  3359                           plusw0	equ	0xFEB
  3360                           fsr0h	equ	0xFEA
  3361                           fsr0l	equ	0xFE9
  3362                           wreg	equ	0xFE8
  3363                           indf1	equ	0xFE7
  3364                           postinc1	equ	0xFE6
  3365                           postdec1	equ	0xFE5
  3366                           preinc1	equ	0xFE4
  3367                           plusw1	equ	0xFE3
  3368                           fsr1h	equ	0xFE2
  3369                           fsr1l	equ	0xFE1
  3370                           bsr	equ	0xFE0
  3371                           indf2	equ	0xFDF
  3372                           postinc2	equ	0xFDE
  3373                           postdec2	equ	0xFDD
  3374                           preinc2	equ	0xFDC
  3375                           plusw2	equ	0xFDB
  3376                           fsr2h	equ	0xFDA
  3377                           fsr2l	equ	0xFD9
  3378                           status	equ	0xFD8


Data Sizes:
    Strings     14
    Constant    0
    Data        0
    BSS         58
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     91      93
    BANK0           160     16      72
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_1(CODE[14]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> msgBuffer(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> msgBuffer(BANK0[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S1060_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> msgBuffer(BANK0[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> msgBuffer(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_1(CODE[14]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_1(CODE[14]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 14
		 -> STR_1(CODE[14]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    CLCD_PutS@str	PTR unsigned char  size(2) Largest target is 16
		 -> msgBuffer(BANK0[16]), 


Critical Paths under _main in COMRAM

    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_utoa
    _utoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _atoi->_isspace
    _CLCD_SetPos->_CLCD_SendCmd
    _CLCD_PutS->_CLCD_PutC
    _CLCD_PutC->_CLCD_SendData
    _CLCD_Initialize->_CLCD_SendCmd

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    8176
                                             89 COMRAM     2     2      0
                    _CLCD_Initialize
                          _CLCD_PutS
                        _CLCD_SetPos
                            _initADC
                            _sprintf
                           _startADC
 ---------------------------------------------------------------------------------
 (1) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    7624
                                              0 BANK0     16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7271
                                             81 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           46    40      6    6899
                                             59 COMRAM    22    16      6
                               _atoi
                              _fputc
                            _isdigit
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                32    22     10    3759
                                             27 COMRAM    32    22     10
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___lomod                                             17     1     16     311
                                              0 COMRAM    17     1     16
 ---------------------------------------------------------------------------------
 (5) ___lodiv                                             25     9     16     314
                                              0 COMRAM    25     9     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                15    13      2    1198
                                              7 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     207
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     237
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     357
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CLCD_SetPos                                          2     1      1     231
                                              3 COMRAM     2     1      1
                       _CLCD_SendCmd
 ---------------------------------------------------------------------------------
 (1) _CLCD_PutS                                            2     0      2     232
                                              4 COMRAM     2     0      2
                          _CLCD_PutC
 ---------------------------------------------------------------------------------
 (2) _CLCD_PutC                                            1     1      0     111
                                              3 COMRAM     1     1      0
                      _CLCD_SendData
 ---------------------------------------------------------------------------------
 (3) _CLCD_SendData                                        3     3      0      89
                                              0 COMRAM     3     3      0
                  _CLCD_ToggleEnable
 ---------------------------------------------------------------------------------
 (1) _CLCD_Initialize                                      1     1      0      89
                                              3 COMRAM     1     1      0
                       _CLCD_SendCmd
 ---------------------------------------------------------------------------------
 (2) _CLCD_SendCmd                                         3     3      0      89
                                              0 COMRAM     3     3      0
                  _CLCD_ToggleEnable
 ---------------------------------------------------------------------------------
 (3) _CLCD_ToggleEnable                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CLCD_Initialize
     _CLCD_SendCmd
       _CLCD_ToggleEnable
   _CLCD_PutS
     _CLCD_PutC
       _CLCD_SendData
         _CLCD_ToggleEnable
   _CLCD_SetPos
     _CLCD_SendCmd
       _CLCD_ToggleEnable
   _initADC
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _fputc
           _putch
         _isdigit
         _utoa
           ___lodiv
           ___lomod
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
   _startADC

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     10      48       5       45.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5B      5D       1       98.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A5      15        0.0%
DATA                 0      0      A5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Aug 03 00:04:34 2019

      __end_of_CLCD_SendCmd 1086       __end_of_CLCD_SendData 1042         ___wmul@multiplicand 0003  
              __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000                __CFG_CP2$OFF 000000  
              __CFG_CP3$OFF 000000                         l141 08F6                         l129 0E08  
                       l139 08EE                         l624 0C6A                         l634 0D18  
                       l885 0BB4                __CFG_CPB$OFF 000000                         u510 0D4A  
                       u600 1124                         u610 1126                         u530 0D92  
              __CFG_CPD$OFF 000000                         u700 10B8                         _ISR 0008  
                       u621 0BC4                         u640 0BFC                         u720 08E4  
                       u810 0B84                         u820 0B86                         u900 0796  
                       u670 0CBE                         u750 0A42                         u910 0798  
                       u751 0A40                         u760 0A50                         u920 07A4  
                       u770 0A54                         u790 0AD6                         u997 0F46  
        __size_of_CLCD_PutC 000A          __size_of_CLCD_PutS 0024                         _pad 0DDA  
              __CFG_BORV$18 000000  __size_of_CLCD_ToggleEnable 000E                         wreg 000FE8  
              __CFG_LVP$OFF 000000                        ?_ISR 0001                        l1402 0D52  
                      l1412 10CE                        l1420 1136                        l1422 113A  
                      l1416 10E4                        l1432 0DF2                        l1506 10BC  
                      l1442 0E2A                        l1436 0E00                        l1524 092C  
                      l1620 0658                        l1550 0A90                        l1446 0E56  
                      l1438 0E12                        l1534 0A18                        l1630 0670  
                      l1622 0668                        l1560 0ADA                        l1552 0A94  
                      l1570 0AF8                        l1466 0BE4                        l1642 0682  
                      l1634 0674                        l1626 066C                        l1618 0656  
                      l1812 117E                        l1572 0B20                        l1468 0BF8  
                      l1660 075E                        l1644 06C4                        l1566 0AEA  
                      l1478 0C54                        l1494 0D02                        l1486 0CA6  
                      l1638 0678                        l1726 0F6A                        l1816 1190  
                      l1808 11F2                        l1576 0B54                        l1568 0AF2  
                      l1488 0CBA                        l1680 087A                        l1656 0732  
                      l1728 0F90                        l1674 083E                        l1658 0750  
                      l1690 089C                        l1684 0884                        l1836 0F08  
                      ?_pad 0011                        STR_1 0601                        u1007 1034  
                      u1017 0E86                        u1027 0E9C                        u1037 0EB4  
                      u1047 0ECC                        u1057 1078                        _LATD 000F8C  
                      i2l48 001E                        _dbuf 0068                        _atoi 0A7E  
                      _main 0EF8                        _prec 0064                        _nout 0060  
                      pad@i 0018                        pad@p 0015                        fsr1h 000FE2  
                      fsr2h 000FDA                        indf2 000FDF                        fsr1l 000FE1  
                      pad@w 001A                        fsr2l 000FD9                        btemp 005E  
                      _utoa 08D0                        prodh 000FF4                        prodl 000FF3  
                      start 0022               __CFG_IESO$OFF 000000               __CFG_MCLRE$ON 000000  
              ___param_bank 000000                       ??_ISR 0001                       ??_pad 0017  
                     ?_atoi 0008                       ?_main 0001                       ?_utoa 001C  
           __end_of___lodiv 0C8C             __end_of___lomod 0D3A                vfpfcnvrt@fmt 003E  
              vfpfcnvrt@llu 0046                       _PORTD 000F83                       _TRISD 000F95  
      __size_of_CLCD_SetPos 001E               __CFG_PWRT$OFF 000000               __CFG_WRT0$OFF 000000  
             __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000  
            __CFG_EBTR0$OFF 000000              __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000  
            __CFG_EBTR2$OFF 000000              __CFG_EBTR3$OFF 000000               __CFG_WRTB$OFF 000000  
             __CFG_WRTC$OFF 000000               __CFG_WRTD$OFF 000000             __end_of_initADC 11C0  
            __CFG_EBTRB$OFF 000000                       _flags 005C                       _fputc 0D3A  
                     _fputs 10C4             __end_of_isdigit 112C                       atoi@n 0015  
                     pad@fp 0011                       atoi@s 0008                       _width 0062  
                     _putch 121C             __end_of_isspace 10C4              __CFG_BOREN$OFF 000000  
                     tablat 000FF5                       ttemp5 005F                       ttemp6 0062  
                     ttemp7 0066                       utoa@d 001E                       utoa@i 003A  
                     utoa@n 0032                       utoa@p 002E                       utoa@w 0030  
                     status 000FD8                       wtemp8 005F             __end_of_sprintf 0FFE  
            __CFG_HFOFST$ON 000000            ___lodiv@dividend 0001           __end_of_CLCD_PutC 1214  
         __end_of_CLCD_PutS 11A0              __CFG_PBADEN$ON 000000             __initialization 11C0  
          ?_CLCD_Initialize 0001                __end_of_atoi 0BBE                __end_of_main 0F56  
              __end_of_utoa 0A7E                      ??_atoi 000A                      ??_main 005A  
                    ??_utoa 0026               __activetblptr 000002            ___lodiv@quotient 0011  
                    _ADCON0 000FC2                      _ADCON1 000FC1                      ?_fputc 0001  
                    ?_fputs 000A                      _ADRESH 000FC4                      _ADRESL 000FC3  
                    ?_putch 0001              __CFG_WDTEN$OFF 000000                      _OSCCON 000FD3  
             vfpfcnvrt@done 004E       __size_of_CLCD_SendCmd 0044              __CFG_XINST$OFF 000000  
              vfprintf@cfmt 0058                      _adcVal 0066                      ___wmul 1156  
            __CFG_STVREN$ON 000000                   ??___lodiv 0011                   ??___lomod 0011  
                    clear_0 11C6                      pad@buf 0013                      _strlen 112C  
                 ??_initADC 0001                      fputc@c 0001                      fputs@c 000E  
                    fputs@i 000F                      fputs@s 000A                   ??_isdigit 0003  
              __mediumconst 0000                   ??_isspace 0003                      tblptrh 000FF7  
                    tblptrl 000FF6                      tblptru 000FF8            __end_of_startADC 121C  
                    putch@c 0001            __end_of_vfprintf 0FAC                _CLCD_SendCmd 1042  
                    utoa@fp 001C                   ??_sprintf 005A                  __accesstop 0060  
   __end_of__initialization 11D0               ___rparam_used 000001              __pcstackCOMRAM 0001  
             __end_of_fputc 0DDA               __end_of_fputs 10FC               __end_of_putch 121E  
                   ??_fputc 0005                     ??_fputs 000E                     ??_putch 0001  
                __pbssBANK0 0060                     ?___wmul 0001                     ?_strlen 0001  
        __size_of_vfpfcnvrt 02C0            ___lomod@dividend 0001      __size_of_CLCD_SendData 0044  
                   __Hparam 0000                     __Lparam 0000                   _CLCD_PutC 120A  
                 _CLCD_PutS 117C                   ?_startADC 0001             __size_of___wmul 0026  
                   ___lodiv 0BBE                     ___lomod 0C8C                   ?_vfprintf 0052  
              __psmallconst 0600                     __pcinit 11C0                   _ANSELbits 000F7E  
                   __ramtop 0600               ??_CLCD_SetPos 0005                     __ptext0 0EF8  
                   __ptext1 1214                     __ptext2 0FAC                     __ptext3 0F56  
                   __ptext4 0610                     __ptext5 08D0                     __ptext6 0DDA  
                   __ptext7 112C                     __ptext8 10C4                     __ptext9 0D3A  
                   _initADC 11A0             __size_of_strlen 002A                __size_of_ISR 001A  
              __size_of_pad 0096                     _isdigit 10FC                     _isspace 1086  
                   atoi@neg 000E                     _sprintf 0FAC        end_of_initialization 11D0  
                   fputc@fp 0003               __Lmediumconst 0000                     fputs@fp 000C  
            CLCD_SetPos@col 0004              CLCD_SetPos@row 0005           __end_of_vfpfcnvrt 08D0  
                   postdec2 000FDD                  ?_CLCD_PutC 0001                  ?_CLCD_PutS 0005  
                   postinc0 000FEE                     postinc1 000FE6                     postinc2 000FDE  
                ??_startADC 0001               _CLCD_SendData 0FFE                  ??_vfprintf 0058  
                   strlen@a 0003                     strlen@s 0001    __size_of_CLCD_Initialize 0088  
                 _TRISAbits 000F92                   _TRISCbits 000F94         __end_of_CLCD_SetPos 11FC  
            ?_CLCD_SendData 0001           CLCD_SendData@data 0002           CLCD_SendData@port 0003  
               vfpfcnvrt@ap 0040                 vfpfcnvrt@fp 003C              __end_of___wmul 117C  
            __end_of_strlen 1156         start_initialization 11C0             ___lodiv@divisor 0009  
           ___lodiv@counter 0019                 __end_of_ISR 0022                 __end_of_pad 0E70  
               vfprintf@fmt 0054                 ??_CLCD_PutC 0004                 ??_CLCD_PutS 0007  
                  ??___wmul 0005            __CFG_LPT1OSC$OFF 000000                 _CLCD_SetPos 11DE  
                  ??_strlen 0003                CLCD_PutS@str 0005                 __pbssCOMRAM 005C  
             __pcstackBANK0 0098           ??_CLCD_Initialize 0004                   _atoi$1040 0012  
                 _atoi$1038 0010                   _atoi$1039 0014             ??_CLCD_SendData 0001  
         __CFG_CCP2MX$PORTC 000000                   __pintcode 0008                    ?___lodiv 0001  
                  ?___lomod 0001           __size_of_startADC 0008           __size_of_vfprintf 0056  
                  ?_initADC 0001             ___lomod@divisor 0009                 __smallconst 0600  
           ___lomod@counter 0011                    ?_isdigit 0001                    ?_isspace 0001  
                  ?_sprintf 0098              __size_of_fputc 00A0              __size_of_fputs 0038  
                 _msgBuffer 0088              __size_of_putch 0002              ___wmul@product 0005  
                  _LATCbits 000F8B                    _PIE1bits 000F9D                    _PIR1bits 000F9E  
          __CFG_WDTPS$32768 000000                   _vfpfcnvrt 0610                  _ADCON0bits 000FC2  
                _ADCON2bits 000FC0           ___wmul@multiplier 0001                _isspace$1056 0007  
             ?_CLCD_SendCmd 0001            CLCD_SendCmd@port 0003                    __Hrparam 0000  
                vfprintf@ap 0056                    __Lrparam 0000                  vfprintf@fp 0052  
               CLCD_PutC@ch 0004            __size_of___lodiv 00CE            __size_of___lomod 00AE  
                ?_vfpfcnvrt 003C                  sprintf@fmt 009A            __size_of_initADC 0020  
          __size_of_isdigit 0030              ??_CLCD_SendCmd 0001            __size_of_isspace 003E  
                  __ptext10 121C                    __ptext11 0C8C                    __ptext20 120A  
                  __ptext12 0BBE                    __ptext21 0FFE                    __ptext13 0A7E  
                  __ptext22 0E70                    __ptext14 1086                    __ptext23 1042  
                  __ptext15 10FC                    __ptext24 11FC                    __ptext16 1156  
                  __ptext17 11A0                    __ptext18 11DE                    __ptext19 117C  
         _CLCD_ToggleEnable 11FC            __size_of_sprintf 0052          ?_CLCD_ToggleEnable 0001  
             __size_of_atoi 0140               __size_of_main 005E               __size_of_utoa 01AE  
       ??_CLCD_ToggleEnable 0001                    int$flags 005E                    _startADC 1214  
                  _vfprintf 0F56             _CLCD_Initialize 0E70             CLCD_SendCmd@cmd 0002  
              ?_CLCD_SetPos 0004                  _INTCONbits 000FF2   __end_of_CLCD_ToggleEnable 120A  
                  isdigit@c 0001                    intlevel2 0000                   sprintf@ap 00A0  
                  isspace@c 0001                 ??_vfpfcnvrt 0042               _vfpfcnvrt$583 0050  
                  sprintf@f 00A2                    sprintf@s 0098           __CFG_FOSC$INTIO67 000000  
   __end_of_CLCD_Initialize 0EF8  
